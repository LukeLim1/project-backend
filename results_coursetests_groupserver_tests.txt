============================= test session starts ==============================
platform linux -- Python 3.10.5, pytest-7.0.1, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/nktnet/temp/project-automarking/tempstore/.hypothesis/examples')
rootdir: /home/nktnet/temp/project-automarking/tempstore
plugins: hypothesis-6.41.0
collecting ... collected 366 items

httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything FAILED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat FAILED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile FAILED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testEmailReusable FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testHandleReusable FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidUser FAILED   [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner PASSED [  3%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidToken PASSED  [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions PASSED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken PASSED [  5%]
httpTests/authTests/test_auth_login.py::testSuccessfulLogin FAILED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions FAILED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  6%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName FAILED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration FAILED [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 11%]
httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect PASSED [ 11%]
httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere FAILED [ 12%]
httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember PASSED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner FAILED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidToken PASSED  [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken PASSED [ 19%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken PASSED    [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp PASSED [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent PASSED [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken PASSED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken PASSED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple FAILED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers PASSED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid PASSED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate PASSED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken FAILED             [ 33%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful FAILED        [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful PASSED  [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken PASSED            [ 34%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully FAILED [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember PASSED      [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken PASSED              [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm FAILED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 36%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm PASSED           [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken PASSED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent FAILED [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent FAILED  [ 37%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected FAILED [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected FAILED [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven PASSED [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval PASSED      [ 39%]
httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages FAILED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm PASSED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm FAILED [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId PASSED              [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken PASSED             [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm FAILED [ 41%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm FAILED [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken PASSED     [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique FAILED [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3 FAILED [ 43%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel PASSED [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm FAILED [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel PASSED [ 44%]
httpTests/messageTests/test_message_pin.py::testInvalidMessageId PASSED  [ 45%]
httpTests/messageTests/test_message_pin.py::testCannotPinTwice PASSED    [ 45%]
httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin PASSED [ 45%]
httpTests/messageTests/test_message_pin.py::testDmMemberCantPin FAILED   [ 45%]
httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm FAILED [ 46%]
httpTests/messageTests/test_message_pin.py::testNonmemberCantPin FAILED  [ 46%]
httpTests/messageTests/test_message_pin.py::testInvalidToken PASSED      [ 46%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel FAILED [ 46%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage FAILED [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidMessageId PASSED [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidReactId PASSED  [ 47%]
httpTests/messageTests/test_message_react.py::testCantReactTwice PASSED  [ 48%]
httpTests/messageTests/test_message_react.py::testNonmemberCannotReact PASSED [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidToken PASSED    [ 48%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage PASSED [ 48%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm FAILED [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testInvalidToken PASSED   [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage PASSED     [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost PASSED    [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel PASSED   [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] PASSED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken PASSED     [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage FAILED   [ 51%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost PASSED  [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm PASSED      [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] PASSED [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken PASSED   [ 53%]
httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage PASSED [ 53%]
httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately FAILED [ 53%]
httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent FAILED [ 54%]
httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater PASSED [ 54%]
httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast PASSED [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[] PASSED [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidChannel PASSED [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidToken PASSED [ 55%]
httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage FAILED [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately FAILED [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent FAILED [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater PASSED [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[] PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken PASSED [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel PASSED [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm FAILED [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True] FAILED [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False] FAILED [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm FAILED [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel FAILED [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm FAILED [ 60%]
httpTests/messageTests/test_message_share.py::testInvalidOgMessageId PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testInvalidMessageLength PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId FAILED [ 61%]
httpTests/messageTests/test_message_share.py::testShareToInvalidDmId PASSED [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidToken FAILED    [ 61%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel PASSED [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm FAILED [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel FAILED [ 62%]
httpTests/messageTests/test_message_unpin.py::testInvalidMessageId PASSED [ 62%]
httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice PASSED [ 63%]
httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin PASSED [ 63%]
httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin FAILED [ 63%]
httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm FAILED [ 63%]
httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin FAILED [ 64%]
httpTests/messageTests/test_message_unpin.py::testInvalidToken PASSED    [ 64%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel FAILED [ 64%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage FAILED [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidMessageId PASSED [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidReactId PASSED [ 65%]
httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice PASSED [ 65%]
httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact PASSED [ 66%]
httpTests/messageTests/test_message_unreact.py::testInvalidToken PASSED  [ 66%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 66%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification FAILED [ 66%]
httpTests/otherTests/test_notifications_get.py::testTagNotInChannel FAILED [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification FAILED [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagSelf FAILED       [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleTags FAILED  [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification FAILED [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification FAILED [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification FAILED [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification FAILED [ 69%]
httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent FAILED [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification FAILED [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message] FAILED [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] FAILED [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch] FAILED [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm] FAILED [ 70%]
httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification FAILED [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification FAILED [ 71%]
httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched FAILED [ 71%]
httpTests/otherTests/test_notifications_get.py::testInvalidToken FAILED  [ 71%]
httpTests/otherTests/test_search.py::testNoMatches FAILED                [ 72%]
httpTests/otherTests/test_search.py::testSingleMatch PASSED              [ 72%]
httpTests/otherTests/test_search.py::testCaseInsensitiveMatch FAILED     [ 72%]
httpTests/otherTests/test_search.py::testMultipleMatches PASSED          [ 72%]
httpTests/otherTests/test_search.py::testMultipleChannelsJoined PASSED   [ 73%]
httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels FAILED [ 73%]
httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser PASSED [ 73%]
httpTests/otherTests/test_search.py::testInvalidSearch[] PASSED          [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 74%]
httpTests/otherTests/test_search.py::testInvalidToken PASSED             [ 74%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll FAILED    [ 74%]
httpTests/otherTests/test_users_all.py::testInvalidToken PASSED          [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True] PASSED [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False] PASSED [ 75%]
httpTests/standupTests/test_standup_active.py::testActiveStandup PASSED  [ 75%]
httpTests/standupTests/test_standup_active.py::testInactiveStandup PASSED [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidChannelId PASSED [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidToken PASSED   [ 76%]
httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly FAILED [ 77%]
httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut FAILED [ 77%]
httpTests/standupTests/test_standup_send.py::testReturnFormat PASSED     [ 77%]
httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend PASSED [ 77%]
httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive PASSED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidMessageLength PASSED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidChannelId PASSED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidToken PASSED     [ 78%]
httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat PASSED [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupNoMessages FAILED [ 79%]
httpTests/standupTests/test_standup_start.py::testReturnsImmediately PASSED [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse FAILED [ 80%]
httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel PASSED [ 80%]
httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup PASSED [ 80%]
httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive PASSED [ 80%]
httpTests/standupTests/test_standup_start.py::testInvalidStandupLength PASSED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidChannelId PASSED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidToken PASSED    [ 81%]
httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect FAILED    [ 81%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave FAILED [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmCreate FAILED   [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmLeave ERROR     [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmRemove ERROR    [ 83%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend FAILED [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater FAILED [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare FAILED [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish FAILED [ 85%]
httpTests/statsTests/test_user_stats.py::testInvolvementTracked FAILED   [ 85%]
httpTests/statsTests/test_user_stats.py::testInvalidToken PASSED         [ 86%]
httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect FAILED   [ 86%]
httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate FAILED [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate FAILED  [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove FAILED  [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend FAILED [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater FAILED [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm FAILED [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater FAILED [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare FAILED [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish FAILED [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testUtilizationTracked FAILED  [ 89%]
httpTests/statsTests/test_users_stats.py::testInvalidToken FAILED        [ 90%]
httpTests/userTests/test_user_profile.py::testUserProfileValid FAILED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken PASSED        [ 90%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect PASSED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg PASSED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0] PASSED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000] PASSED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue PASSED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue PASSED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl PASSED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken FAILED [100%]

====== Marks recorded: 104.80 ======


==================================== ERRORS ====================================
___________________ ERROR at setup of testSmsTrackedSmLeave ____________________
file /home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 96
  @iteration3
  def testSmsTrackedSmLeave(userWoody, woodyAndBuzzSm, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, messageFactory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:96
___________________ ERROR at setup of testSmsTrackedSmRemove ___________________
file /home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 107
  @iteration3
  def testSmsTrackedSmRemove(userWoody, userBuzz, woodyAndBuzzSm, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, messageFactory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:107
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________
file /home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 144
  @iteration3
  def testMessagesTrackedMessageSenddm(userWoody, woodyAndBuzzSm, messageFactory, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, messageFactory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:144
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________
file /home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 155
  @iteration3
  def testMessagesTrackedMessageSenddmlater(userWoody, woodyAndBuzzSm, messageFactory, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, messageFactory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/home/nktnet/temp/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:155
=================================== FAILURES ===================================
______________________ testOnceRemovedUserCantDoAnything _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testOnceRemovedUserCantDoAnything(userWoody, userZerg, woodysPublicToybox, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________ testMessagesAfterUserRemovalCorrectFormat ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955df003a0>
ctx = None

    @iteration3
    def testMessagesAfterUserRemovalCorrectFormat(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userZerg.token, woodysPublicToybox.channelId, ctx)
        messageFactory(userZerg, woodysPublicToybox, 'hi')
    
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________ testRemovedProfileStillFetchableWithUserProfile ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testRemovedProfileStillFetchableWithUserProfile(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testRemovalRemovedFromChannel _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testRemovalRemovedFromChannel(userWoody, userZerg, woodysPublicToybox, ctx):
        channelJoin(userZerg.token, woodysPublicToybox.channelId, ctx)
    
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________________ testRemovalRemovedFromDm ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    @iteration3
    def testRemovalRemovedFromDm(userWoody, userBuzz, woodyAndBuzzDm, ctx):
>       adminUserRemove(userWoody.token, userBuzz.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________________ testRemovalNotInUsersAll ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testRemovalNotInUsersAll(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
______________________________ testEmailReusable _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testEmailReusable(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
______________________________ testHandleReusable ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testHandleReusable(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserRemove(userWoody.token, -1, ctx)

httpTests/adminTests/test_admin_user_remove.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testCannotRemoveLastOwner(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserRemove(userWoody.token, userWoody.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testSuccessfulPermissionChange ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testSuccessfulPermissionChange(userWoody, userBuzz, ctx):
>       adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testCannotDemoteLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testCannotDemoteLastOwner(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, -1, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testInvalidPermission _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testInvalidPermission(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, 1531, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
______________________________ testSamePermission ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    @iteration3
    def testSamePermission(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_____________________________ testSuccessfulLogin ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testSuccessfulLogin(userWoody, ctx):
        ret = authLogin(userWoody.email, userWoody.password, ctx)
    
        #  will break if iteration 1
>       assert type(ret.get('authUserId')) is int and type(ret.get('token')) is str
E       AssertionError: assert (<class 'int'> is int and <class 'list'> is str)
E        +  where <class 'int'> = type(1)
E        +    where 1 = <built-in method get of dict object at 0x7f955de75ac0>('authUserId')
E        +      where <built-in method get of dict object at 0x7f955de75ac0> = {'authUserId': 1, 'token': ['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35']}.get
E        +  and   <class 'list'> = type(['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35'])
E        +    where ['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35'] = <built-in method get of dict object at 0x7f955de75ac0>('token')
E        +      where <built-in method get of dict object at 0x7f955de75ac0> = {'authUserId': 1, 'token': ['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35']}.get

httpTests/authTests/test_auth_login.py:18: AssertionError
____________________________ testCanHaveTwoSessions ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.overrideMarks(2)
    def testCanHaveTwoSessions(userWoody, ctx):
        session2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        # succeeds
>       assert userProfile(session2['token'], userWoody.uId, ctx) == userProfile(userWoody.token, userWoody.uId, ctx)

httpTests/authTests/test_auth_login.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:12: in userProfile
    requests.get(
/usr/lib/python3.10/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/usr/lib/python3.10/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/usr/lib/python3.10/site-packages/requests/sessions.py:573: in request
    prep = self.prepare_request(req)
/usr/lib/python3.10/site-packages/requests/sessions.py:484: in prepare_request
    p.prepare(
/usr/lib/python3.10/site-packages/requests/models.py:369: in prepare
    self.prepare_headers(headers)
/usr/lib/python3.10/site-packages/requests/models.py:491: in prepare_headers
    check_header_validity(header)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

header = ('token', ['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35'])

    def check_header_validity(header):
        """Verifies that header parts don't contain leading whitespace
        reserved characters, or return characters.
    
        :param header: tuple, in the format (name, value).
        """
        name, value = header
    
        for part in header:
            if type(part) not in HEADER_VALIDATORS:
>               raise InvalidHeader(
                    f"Header part ({part!r}) from {{{name!r}: {value!r}}} must be "
                    f"of type str or bytes, not {type(part)}"
                )
E               requests.exceptions.InvalidHeader: Header part (['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35']) from {'token': ['6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', 'd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35']} must be of type str or bytes, not <class 'list'>

/usr/lib/python3.10/site-packages/requests/utils.py:1037: InvalidHeader
_____________________________ testRemovedUserName ______________________________

ctx = None

    def testRemovedUserName(ctx):
        session = authRegister('abc@gmail.com', 'password1', 'Removed', 'user', ctx)
>       profile = userProfile(session['token'], session['authUserId'], ctx)['user']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:55: KeyError
__________________________ testSuccessfulRegistration __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testSuccessfulRegistration(userWoody, ctx):
>       woodyProf = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:62: KeyError
____________ testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] _____________

nameFirst = 'Bob', nameLast = 'Smith', expectedHandle = 'bobsmith', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:78: KeyError
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:78: KeyError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

first1 = 'abcdefghij', last1 = 'klmnopqrs', handle1 = 'abcdefghijklmnopqrs'
first2 = 'abcdefghij', last2 = 'klmnopqrs', handle2 = 'abcdefghijklmnopqrs0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

first1 = 'abcdefghij', last1 = 'klmnopqrst', handle1 = 'abcdefghijklmnopqrst'
first2 = 'abcdefghij', last2 = 'klmnopqrst', handle2 = 'abcdefghijklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_ testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
___ testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ___

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_____________________ testPasswordRequestLogsOutEverywhere _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testPasswordRequestLogsOutEverywhere(userWoody, ctx):
        sess2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        authPasswordresetRequest(userWoody.email, ctx)
    
>       with pytest.raises(AccessError):
E       Failed: DID NOT RAISE <class 'httpTests.error.AccessError'>

httpTests/authTests/test_passwordreset_request.py:28: Failed
_____________________________ testInvalidPassword ______________________________

ctx = None

    @iteration3
    def testInvalidPassword(ctx):
        with pytest.raises(InputError):
>           authPasswordresetReset('ur a wizard herry', 'ord', ctx)

httpTests/authTests/test_passwordreset_reset.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:56: in authPasswordresetReset
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ testChannelOwnerCanAddownerWhenMember _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testChannelOwnerCanAddownerWhenMember(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        chDeets = channelDetails(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        assert userBuzz.uId in [k['uId'] for k in chDeets['allMembers']]
>       assert userBuzz.uId in [k['uId'] for k in chDeets['ownerMembers']]
E       AssertionError: assert 2 in [1]
E        +  where 2 = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='').uId

httpTests/channelTests/test_channel_addowner.py:24: AssertionError
_________________________ testNonMemberCannotAddOwner __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testNonMemberCannotAddOwner(woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_________________ testGlobalOwnerNonMemberCantAddownerPrivate __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPrivate(userWoody, zergsPrivateLair, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userWoody.token, zergsPrivateLair.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
__________________ testGlobalOwnerNonMemberCantAddownerPublic __________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPublic(userBuzz, woodysPublicToybox, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
___________________ testCannotAddownerPrexistingChannelOwner ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    def testCannotAddownerPrexistingChannelOwner(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(InputError):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testOverFiftyMessagesSent ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testOverFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        assert chMsgs['start'] == 0
>       assert chMsgs['end'] == 50
E       assert -1 == 50
E         +-1
E         -50

httpTests/channelTests/test_channel_messages.py:44: AssertionError
______________________ testGlobalOwnerMmberCanRemoveOwner ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=3, token='4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce', handleStr='')
ctx = None

    def testGlobalOwnerMmberCanRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
        channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
>       channelRemoveowner(userZerg.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testNonmemberCannotRemoveOwner ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testNonmemberCannotRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
__________________________ testMmberCannotRemoveOwner __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testMmberCannotRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        with pytest.raises(AccessError):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsCreate(userWoody.token, 'literally anything', True, ctx)

httpTests/channels_tests/test_channels_create.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_______________________ testWhenInOneChannel[True-andy] ________________________

name = 'andy', isPublic = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testWhenInOneChannel(name, isPublic, userWoody, ctx):
        ch = channelsCreate(userWoody.token, name, isPublic, ctx)['channelId']
    
        deets = {'channelId': ch, 'name': name}
    
>       assert deets in channelsList(userWoody.token, ctx)['channels']
E       AssertionError: assert {'channelId': 1, 'name': 'andy'} in [{'allMembers': [{'email': 'sheriff.woody@andysroom.com', 'handleStr': 'sheriffwoody', 'nameFirst': 'sheriff', 'nameLast': 'woody', ...}], 'channelId': 1, 'name': 'andy', 'ownerMembers': [{'email': 'sheriff.woody@andysroom.com', 'handleStr': 'sheriffwoody', 'nameFirst': 'sheriff', 'nameLast': 'woody', ...}]}]

httpTests/channels_tests/test_channels_list.py:26: AssertionError
_______________________ testWhenInOneChannel[False-andy] _______________________

name = 'andy', isPublic = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testWhenInOneChannel(name, isPublic, userWoody, ctx):
        ch = channelsCreate(userWoody.token, name, isPublic, ctx)['channelId']
    
        deets = {'channelId': ch, 'name': name}
    
>       assert deets in channelsList(userWoody.token, ctx)['channels']
E       AssertionError: assert {'channelId': 1, 'name': 'andy'} in []

httpTests/channels_tests/test_channels_list.py:26: AssertionError
_______________ testWhenInMultipleChannels[False-True-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = True, isPublic2 = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
        ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
        ch_2 = channelsCreate(userWoody.token, name2, isPublic2, ctx)['channelId']
    
        expectedJoined = [{'channelId': ch_1, 'name': name1}, {'channelId': ch_2, 'name': name2}]
        joined = channelsList(userWoody.token, ctx)['channels']
    
>       assert sorted(expectedJoined, key=lambda d: d['channelId']) == sorted(joined, key=lambda d: d['channelId'])
E       AssertionError: assert [{'channelId': 1, 'name': 'andy'}, {'channelId': 2, 'name': 'ZERG'}] == [{'allMembers': [{'email': 'sheriff.woody@andysroom.com',\n                  'handleStr': 'sheriffwoody',\n                  'nameFirst': 'sheriff',\n                  'nameLast': 'woody',\n                  'uId': 1}],\n  'channelId': 1,\n  'name': 'andy',\n  'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',\n                    'handleStr': 'sheriffwoody',\n                    'nameFirst': 'sheriff',\n                    'nameLast': 'woody',\n                    'uId': 1}]}]
E         At index 0 diff: {'channelId': 1, 'name': 'andy'} != {'channelId': 1, 'name': 'andy', 'ownerMembers': [{'uId': 1, 'email': 'sheriff.woody@andysroom.com', 'nameFirst': 'sheriff', 'nameLast': 'woody', 'handleStr': 'sheriffwoody'}], 'allMembers': [{'uId': 1, 'email': 'sheriff.woody@andysroom.com', 'nameFirst': 'sheriff', 'nameLast': 'woody', 'handleStr': 'sheriffwoody'}]}
E         Left contains one more item: {'channelId': 2, 'name': 'ZERG'}
E         Full diff:
E           [
E         -  {'allMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                   'handleStr': 'sheriffwoody',
E         -                   'nameFirst': 'sheriff',
E         -                   'nameLast': 'woody',
E         -                   'uId': 1}],
E         -   'channelId': 1,
E         ?  ^
E         +  {'channelId': 1,
E         ?  ^
E         -   'name': 'andy',
E         +   'name': 'andy'},
E         ?                 +
E         +  {'channelId': 2,
E         +   'name': 'ZERG'},
E         -   'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                     'handleStr': 'sheriffwoody',
E         -                     'nameFirst': 'sheriff',
E         -                     'nameLast': 'woody',
E         -                     'uId': 1}]},
E           ]

httpTests/channels_tests/test_channels_list.py:40: AssertionError
______________ testWhenInMultipleChannels[False-False-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = False, isPublic2 = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
        ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
        ch_2 = channelsCreate(userWoody.token, name2, isPublic2, ctx)['channelId']
    
        expectedJoined = [{'channelId': ch_1, 'name': name1}, {'channelId': ch_2, 'name': name2}]
        joined = channelsList(userWoody.token, ctx)['channels']
    
>       assert sorted(expectedJoined, key=lambda d: d['channelId']) == sorted(joined, key=lambda d: d['channelId'])
E       AssertionError: assert [{'channelId': 1, 'name': 'andy'}, {'channelId': 2, 'name': 'ZERG'}] == []
E         Left contains 2 more items, first extra item: {'channelId': 1, 'name': 'andy'}
E         Full diff:
E         - []
E         + [{'channelId': 1, 'name': 'andy'}, {'channelId': 2, 'name': 'ZERG'}]

httpTests/channels_tests/test_channels_list.py:40: AssertionError
_______________ testWhenInMultipleChannels[True-True-ZERG-andy] ________________

name1 = 'andy', name2 = 'ZERG', isPublic1 = True, isPublic2 = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
        ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
        ch_2 = channelsCreate(userWoody.token, name2, isPublic2, ctx)['channelId']
    
        expectedJoined = [{'channelId': ch_1, 'name': name1}, {'channelId': ch_2, 'name': name2}]
        joined = channelsList(userWoody.token, ctx)['channels']
    
>       assert sorted(expectedJoined, key=lambda d: d['channelId']) == sorted(joined, key=lambda d: d['channelId'])
E       AssertionError: assert [{'channelId': 1, 'name': 'andy'}, {'channelId': 2, 'name': 'ZERG'}] == [{'allMembers': [{'email': 'sheriff.woody@andysroom.com',\n                  'handleStr': 'sheriffwoody',\n                  'nameFirst': 'sheriff',\n                  'nameLast': 'woody',\n                  'uId': 1}],\n  'channelId': 1,\n  'name': 'andy',\n  'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',\n                    'handleStr': 'sheriffwoody',\n                    'nameFirst': 'sheriff',\n                    'nameLast': 'woody',\n                    'uId': 1}]},\n {'allMembers': [{'email': 'sheriff.woody@andysroom.com',\n                  'handleStr': 'sheriffwoody',\n                  'nameFirst': 'sheriff',\n                  'nameLast': 'woody',\n                  'uId': 1}],\n  'channelId': 2,\n  'name': 'ZERG',\n  'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',\n                    'handleStr': 'sheriffwoody',\n                    'nameFirst': 'sheriff',\n                    'nameLast': 'woody',\n                    'uId': 1}]}]
E         At index 0 diff: {'channelId': 1, 'name': 'andy'} != {'channelId': 1, 'name': 'andy', 'ownerMembers': [{'uId': 1, 'email': 'sheriff.woody@andysroom.com', 'nameFirst': 'sheriff', 'nameLast': 'woody', 'handleStr': 'sheriffwoody'}], 'allMembers': [{'uId': 1, 'email': 'sheriff.woody@andysroom.com', 'nameFirst': 'sheriff', 'nameLast': 'woody', 'handleStr': 'sheriffwoody'}]}
E         Full diff:
E           [
E         -  {'allMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                   'handleStr': 'sheriffwoody',
E         -                   'nameFirst': 'sheriff',
E         -                   'nameLast': 'woody',
E         -                   'uId': 1}],
E         -   'channelId': 1,
E         ?  ^
E         +  {'channelId': 1,
E         ?  ^
E         -   'name': 'andy',
E         +   'name': 'andy'},
E         ?                 +
E         -   'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                     'handleStr': 'sheriffwoody',
E         -                     'nameFirst': 'sheriff',
E         -                     'nameLast': 'woody',
E         -                     'uId': 1}]},
E         -  {'allMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                   'handleStr': 'sheriffwoody',
E         -                   'nameFirst': 'sheriff',
E         -                   'nameLast': 'woody',
E         -                   'uId': 1}],
E         -   'channelId': 2,
E         ?  ^
E         +  {'channelId': 2,
E         ?  ^
E         -   'name': 'ZERG',
E         +   'name': 'ZERG'},
E         ?                 +
E         -   'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                     'handleStr': 'sheriffwoody',
E         -                     'nameFirst': 'sheriff',
E         -                     'nameLast': 'woody',
E         -                     'uId': 1}]},
E           ]

httpTests/channels_tests/test_channels_list.py:40: AssertionError
_______________ testWhenInMultipleChannels[True-False-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = False, isPublic2 = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
        ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
        ch_2 = channelsCreate(userWoody.token, name2, isPublic2, ctx)['channelId']
    
        expectedJoined = [{'channelId': ch_1, 'name': name1}, {'channelId': ch_2, 'name': name2}]
        joined = channelsList(userWoody.token, ctx)['channels']
    
>       assert sorted(expectedJoined, key=lambda d: d['channelId']) == sorted(joined, key=lambda d: d['channelId'])
E       AssertionError: assert [{'channelId': 1, 'name': 'andy'}, {'channelId': 2, 'name': 'ZERG'}] == [{'allMembers': [{'email': 'sheriff.woody@andysroom.com',\n                  'handleStr': 'sheriffwoody',\n                  'nameFirst': 'sheriff',\n                  'nameLast': 'woody',\n                  'uId': 1}],\n  'channelId': 2,\n  'name': 'ZERG',\n  'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',\n                    'handleStr': 'sheriffwoody',\n                    'nameFirst': 'sheriff',\n                    'nameLast': 'woody',\n                    'uId': 1}]}]
E         At index 0 diff: {'channelId': 1, 'name': 'andy'} != {'channelId': 2, 'name': 'ZERG', 'ownerMembers': [{'uId': 1, 'email': 'sheriff.woody@andysroom.com', 'nameFirst': 'sheriff', 'nameLast': 'woody', 'handleStr': 'sheriffwoody'}], 'allMembers': [{'uId': 1, 'email': 'sheriff.woody@andysroom.com', 'nameFirst': 'sheriff', 'nameLast': 'woody', 'handleStr': 'sheriffwoody'}]}
E         Left contains one more item: {'channelId': 2, 'name': 'ZERG'}
E         Full diff:
E           [
E         +  {'channelId': 1,
E         +   'name': 'andy'},
E         -  {'allMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                   'handleStr': 'sheriffwoody',
E         -                   'nameFirst': 'sheriff',
E         -                   'nameLast': 'woody',
E         -                   'uId': 1}],
E         -   'channelId': 2,
E         ?  ^
E         +  {'channelId': 2,
E         ?  ^
E         -   'name': 'ZERG',
E         +   'name': 'ZERG'},
E         ?                 +
E         -   'ownerMembers': [{'email': 'sheriff.woody@andysroom.com',
E         -                     'handleStr': 'sheriffwoody',
E         -                     'nameFirst': 'sheriff',
E         -                     'nameLast': 'woody',
E         -                     'uId': 1}]},
E           ]

httpTests/channels_tests/test_channels_list.py:40: AssertionError
_______________________ testWhenOneChannelExistsPrivate ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    def testWhenOneChannelExistsPrivate(userWoody, zergsPrivateLair, ctx):
        channelDetail = {'channelId': zergsPrivateLair.channelId, 'name': zergsPrivateLair.name}
    
>       assert channelDetail in channelsListall(userWoody.token, ctx)['channels']
E       AssertionError: assert {'channelId': 1, 'name': 'zergs lair'} in []

httpTests/channels_tests/test_channels_listall.py:21: AssertionError
________________________ testWhenOneChannelExistsPublic ________________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    def testWhenOneChannelExistsPublic(userZerg, woodysPublicToybox, ctx):
        channelDetail = {'channelId': woodysPublicToybox.channelId, 'name': woodysPublicToybox.name}
    
>       assert channelDetail in channelsListall(userZerg.token, ctx)['channels']
E       AssertionError: assert {'channelId': 1, 'name': 'woodys toybox'} in []

httpTests/channels_tests/test_channels_listall.py:27: AssertionError
________________________ testWhenMultipleChannelsExist _________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=2, ownerMembers=[2], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=3, token='4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce', handleStr='')
ctx = None

    def testWhenMultipleChannelsExist(woodysPublicToybox, zergsPrivateLair, userBuzz, ctx):
        expectedChs = [
            {'channelId': woodysPublicToybox.channelId, 'name': woodysPublicToybox.name},
            {'channelId': zergsPrivateLair.channelId, 'name': zergsPrivateLair.name}
        ]
    
        chs = channels.channelsListall(userBuzz.token, ctx)['channels']
    
>       assert sorted(chs, key=lambda d: d['channelId']) == sorted(expectedChs, key=lambda d: d['channelId'])
E       AssertionError: assert [] == [{'channelId': 1, 'name': 'woodys toybox'},\n {'channelId': 2, 'name': 'zergs lair'}]
E         Right contains 2 more items, first extra item: {'channelId': 1, 'name': 'woodys toybox'}
E         Full diff:
E           [
E         +  ,
E         -  {'channelId': 1,
E         -   'name': 'woodys toybox'},
E         -  {'channelId': 2,
E         -   'name': 'zergs lair'},
E           ]

httpTests/channels_tests/test_channels_listall.py:38: AssertionError
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
        aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)
    
        woodysDms = dmList(userWoody.token, ctx)
        buzzsDms = dmList(userBuzz.token, ctx)
    
>       assert woodysDms['dms'][0]['dmId'] == aDm['dmId']
E       IndexError: list index out of range

httpTests/dmTests/test_dm_create.py:20: IndexError
__________________________ testDmNameCreationMultiple __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testDmNameCreationMultiple(userWoody, userBuzz, ctx):
        theDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)
>       dmDeets = dmDetails(userWoody.token, theDm['dmId'], ctx)

httpTests/dmTests/test_dm_create.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:13: in dmDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmCreate(userWoody.token, [], ctx)

httpTests/dmTests/test_dm_create.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_____________________________ testMemberSuccessful _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testMemberSuccessful(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        dmDeets = dmDetails(userBuzz.token, woodyAndBuzzDm.dmId, ctx)
    
>       assert dmDeets['name'] == woodyAndBuzzDm.name
E       AssertionError: assert 'buzzlightyear' == ''
E         + buzzlightyear

httpTests/dmTests/test_dm_details.py:17: AssertionError
________________________ testMemberLeaveDmSuccessfully _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testMemberLeaveDmSuccessfully(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        dmLeave(userBuzz.token, woodyAndBuzzDm.dmId, ctx)
    
        buzzsDms = dmList(userBuzz.token, ctx)
>       dmDeets = dmDetails(userWoody.token, woodyAndBuzzDm.dmId, ctx)

httpTests/dmTests/test_dm_leave.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:13: in dmDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________________ testWhenInOneDm ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testWhenInOneDm(userWoody, woodyAndBuzzDm, ctx):
        dms = dmList(userWoody.token, ctx)
    
>       assert dms == {'dms': [{'name': woodyAndBuzzDm.name, 'dmId': woodyAndBuzzDm.dmId}]}
E       AssertionError: assert {'dms': []} == {'dms': [{'dmId': 1, 'name': ''}]}
E         Differing items:
E         {'dms': []} != {'dms': [{'dmId': 1, 'name': ''}]}
E         Full diff:
E         - {'dms': [{'dmId': 1, 'name': ''}]}
E         + {'dms': []}

httpTests/dmTests/test_dm_list.py:21: AssertionError
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f955de0fac0>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
        dm_1 = dmFactory(userWoody, [])
        dm_2 = dmFactory(userWoody, [])
    
        expected = [{'dmId': dm_1.dmId, 'name': dm_1.name}, {'dmId': dm_2.dmId, 'name': dm_2.name}]
        actual = dmList(userWoody.token, ctx)['dms']
    
>       assert sorted(actual, key=lambda d: d['dmId']) == sorted(expected, key=lambda d: d['dmId'])
E       AssertionError: assert [] == [{'dmId': 1, 'name': ''}, {'dmId': 2, 'name': ''}]
E         Right contains 2 more items, first extra item: {'dmId': 1, 'name': ''}
E         Full diff:
E         - [{'dmId': 1, 'name': ''}, {'dmId': 2, 'name': ''}]
E         + []

httpTests/dmTests/test_dm_list.py:31: AssertionError
__________________________ testUnderFiftyMessagesSent __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testUnderFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
>       messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]

httpTests/dmTests/test_dm_messages.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/dmTests/test_dm_messages.py:17: in <listcomp>
    messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testOverFiftyMessagesSent ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testOverFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
>       messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]

httpTests/dmTests/test_dm_messages.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/dmTests/test_dm_messages.py:30: in <listcomp>
    messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testRemovalByEditReflected __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testRemovalByEditReflected(userWoody, woodyAndBuzzDm, ctx):
>       msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']

httpTests/dmTests/test_dm_messages.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testRemovalByDeletionReflected ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testRemovalByDeletionReflected(userWoody, woodyAndBuzzDm, ctx):
>       msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']

httpTests/dmTests/test_dm_messages.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testRemovalRemovesMessages __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1ae60>
ctx = None

    @iteration3
    def testRemovalRemovesMessages(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       messageFactory(userWoody, woodyAndBuzzDm, 'electric')

httpTests/dmTests/test_dm_remove.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________ testOwnerNonmemberCannotRemoveDm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testOwnerNonmemberCannotRemoveDm(userWoody, woodyAndBuzzDm, ctx):
>       dmLeave(userWoody.token, woodyAndBuzzDm.dmId, ctx)

httpTests/dmTests/test_dm_remove.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:65: in dmLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
______________________ testOriginalPosterCanEditMessageDm ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dced1b0>
ctx = None

    def testOriginalPosterCanEditMessageDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_edit.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________ testGlobalOwnerCantEditMembersMessageDm ____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=2, members=[1], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd189d0>
ctx = None

    def testGlobalOwnerCantEditMembersMessageDm(userBuzz, userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       woodysMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_edit.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_____________________________ testMessageIdsUnique _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[3], name='', dmId=1)
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    @pytest.mark.marks(0.5)
    def testMessageIdsUnique(userWoody, userZerg, woodyAndBuzzDm, zergsPrivateLair, ctx):
        msg1 = messageSend(userZerg.token, zergsPrivateLair.channelId, 'hi', ctx)
    
        # cross
>       msg2 = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'hi again', ctx)

httpTests/messageTests/test_message_meta.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________________ testMessageIdsUniqueIter3 ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[3], name='', dmId=1)
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    @pytest.mark.marks(0.5)
    @iteration3
    def testMessageIdsUniqueIter3(userWoody, userZerg, woodyAndBuzzDm, zergsPrivateLair, ctx):
        msg1 = messageSend(userZerg.token, zergsPrivateLair.channelId, 'hi', ctx)
    
        # intra
        msg2 = messageSendlater(userZerg.token, zergsPrivateLair.channelId, 'hi', utcNow() + 1, ctx)
    
        # cross
>       msg3 = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'hi again', ctx)

httpTests/messageTests/test_message_meta.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_________________________ testSuccessfulPinDmOwnerInDm _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcefd90>
ctx = None

    @iteration3
    def testSuccessfulPinDmOwnerInDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_pin.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_____________________________ testDmMemberCantPin ______________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=2, members=[1], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd637f0>
ctx = None

    @iteration3
    def testDmMemberCantPin(userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userBuzz, woodyAndBuzzDm)
>       with pytest.raises(AccessError):
E       Failed: DID NOT RAISE <class 'httpTests.error.AccessError'>

httpTests/messageTests/test_message_pin.py:82: Failed
__________________________ testGlobalOwnerCantPinInDm __________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=2, members=[1], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd62050>
ctx = None

    @iteration3
    def testGlobalOwnerCantPinInDm(userBuzz, userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_pin.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_____________________________ testNonmemberCantPin _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de0fb50>
ctx = None

    @iteration3
    def testNonmemberCantPin(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        with pytest.raises(InputError):
>           messagePin(userZerg.token, aMsg.messageId, ctx)

httpTests/messageTests/test_message_pin.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_________________________ testSuccessfulReactInChannel _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955df02440>
ctx = None

    @iteration3
    def testSuccessfulReactInChannel(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        assert messageReact(userWoody.token, aMsg.messageId, REACT, ctx) == {}
    
        woodysVw = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)['messages'][0]['reacts'][0]
        buzzsVw = channelMessages(userBuzz.token, woodysPublicToybox.channelId, 0, ctx)['messages'][0]['reacts'][0]
    
        assert userWoody.uId in woodysVw['uIds']
>       assert woodysVw['isThisUserReacted']
E       assert False

httpTests/messageTests/test_message_react.py:30: AssertionError
________________________ testSuccessfulReactToDmMessage ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd62440>
ctx = None

    @iteration3
    def testSuccessfulReactToDmMessage(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_react.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
__________________ testGlobalOwnerCantRemoveMembersMessageDm ___________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=2, members=[1], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de1f520>
ctx = None

    def testGlobalOwnerCantRemoveMembersMessageDm(userBuzz, userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       woodysMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_remove.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________________ testValidMessage _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    def testValidMessage(userWoody, woodyAndBuzzDm, ctx):
        msgText = 'hello, world'
>       msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, msgText, ctx)

httpTests/messageTests/test_message_senddm.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testReturnsImmediately ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testReturnsImmediately(userWoody, woodysPublicToybox, ctx):
        msgText = 'hello, world'
        timeReq = utcNow()
        tts = utcNow() + 2
        msg = messageSendlater(userWoody.token, woodysPublicToybox.channelId, msgText, tts, ctx)
    
        assert abs(timeReq - utcNow()) <= 1
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
>       assert len(chMsgs['messages']) == 0
E       assert 1 == 0
E         +1
E         -0

httpTests/messageTests/test_message_sendlater.py:43: AssertionError
________________________ testInvalidReturnedIdUntilSent ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testInvalidReturnedIdUntilSent(userWoody, woodysPublicToybox, ctx):
        msgText = 'hello, world'
        tts = utcNow() + 2
        msg = messageSendlater(userWoody.token, woodysPublicToybox.channelId, msgText, tts, ctx)
    
>       with pytest.raises(InputError):
E       Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_sendlater.py:54: Failed
____________________________ testValidFutureMessage ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    @iteration3
    def testValidFutureMessage(userWoody, woodyAndBuzzDm, ctx):
        msgText = 'hello, world'
        tts = utcNow() + 2
>       msg = messageSendlaterdm(userWoody.token, woodyAndBuzzDm.dmId, msgText, tts, ctx)

httpTests/messageTests/test_message_sendlaterdm.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:141: in messageSendlaterdm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testReturnsImmediately ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    @iteration3
    def testReturnsImmediately(userWoody, woodyAndBuzzDm, ctx):
        msgText = 'hello, world'
        timeReq = utcNow()
        tts = utcNow() + 2
>       msg = messageSendlaterdm(userWoody.token, woodyAndBuzzDm.dmId, msgText, tts, ctx)

httpTests/messageTests/test_message_sendlaterdm.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:141: in messageSendlaterdm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testInvalidReturnedIdUntilSent ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    @iteration3
    def testInvalidReturnedIdUntilSent(userWoody, woodyAndBuzzDm, ctx):
        msgText = 'hello, world'
        tts = utcNow() + 2
>       msg = messageSendlaterdm(userWoody.token, woodyAndBuzzDm.dmId, msgText, tts, ctx)

httpTests/messageTests/test_message_sendlaterdm.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:141: in messageSendlaterdm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________________ testSuccessfulShareToDm ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd18820>
ctx = None

    @iteration3
    def testSuccessfulShareToDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm, 'hi')

httpTests/messageTests/test_message_share.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testSuccessfulCrossShare[True] ________________________

toCh = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de0e560>
ctx = None

    @iteration3
    @pytest.mark.parametrize('toCh', [True, False])
    def testSuccessfulCrossShare(toCh, userWoody, woodysPublicToybox, woodyAndBuzzDm, messageFactory, ctx):
        if toCh:
>           aMsg = messageFactory(userWoody, woodyAndBuzzDm, 'hi')

httpTests/messageTests/test_message_share.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________ testSuccessfulCrossShare[False] ________________________

toCh = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de1d630>
ctx = None

    @iteration3
    @pytest.mark.parametrize('toCh', [True, False])
    def testSuccessfulCrossShare(toCh, userWoody, woodysPublicToybox, woodyAndBuzzDm, messageFactory, ctx):
        if toCh:
            aMsg = messageFactory(userWoody, woodyAndBuzzDm, 'hi')
            cross = messageShare(userWoody.token, aMsg.messageId, 'amazing', woodysPublicToybox.channelId, -1, ctx)
            msgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        else:
            aMsg = messageFactory(userWoody, woodysPublicToybox, 'hi')
>           cross = messageShare(userWoody.token, aMsg.messageId, 'amazing', -1, woodyAndBuzzDm.dmId, ctx)

httpTests/messageTests/test_message_share.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:102: in messageShare
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_________________________ testCannotShareToUnjoinedDm __________________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[1], allMembers=[])
woodyAndBuzzDm = DM(owner=2, members=[3], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955df03a30>
ctx = None

    @iteration3
    def testCannotShareToUnjoinedDm(userZerg, zergsPrivateLair, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userZerg, zergsPrivateLair)
        with pytest.raises(AccessError):
>           messageShare(userZerg.token, aMsg.messageId, '', -1, woodyAndBuzzDm.dmId, ctx)

httpTests/messageTests/test_message_share.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:102: in messageShare
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_______________________ testCannotShareToUnjoinedChannel _______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[1], allMembers=[])
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=2, ownerMembers=[2], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1a050>
ctx = None

    @iteration3
    def testCannotShareToUnjoinedChannel(userZerg, zergsPrivateLair, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userZerg, zergsPrivateLair)
        with pytest.raises(AccessError):
>           messageShare(userZerg.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)

httpTests/messageTests/test_message_share.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:102: in messageShare
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
________________________ testCannotShareFromUnjoinedDm _________________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=2, members=[3], name='', dmId=1)
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0c790>
ctx = None

    @iteration3
    def testCannotShareFromUnjoinedDm(userZerg, userWoody, woodyAndBuzzDm, zergsPrivateLair, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_share.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_________________________ testShareToInvalidChannelId __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0dab0>
ctx = None

    @iteration3
    def testShareToInvalidChannelId(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_share.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd188b0>
ctx = None

    @iteration3
    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageShare(userWoody.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)

httpTests/messageTests/test_message_share.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:102: in messageShare
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________ testSuccessfulUnpinDmOwnerInDm ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0cc10>
ctx = None

    @iteration3
    def testSuccessfulUnpinDmOwnerInDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_unpin.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________ testSuccessfulUnpinGlobalOwnerInChannel ____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955df02050>
ctx = None

    @iteration3
    def testSuccessfulUnpinGlobalOwnerInChannel(userBuzz, userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        msgPin(userBuzz.token, aMsg.messageId, ctx) == {}
    
>       assert messageUnpin(userWoody.token, aMsg.messageId, ctx) == {}

httpTests/messageTests/test_message_unpin.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:63: in messageUnpin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testDmMemberCantUnpin _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1b520>
ctx = None

    @iteration3
    def testDmMemberCantUnpin(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userBuzz, woodyAndBuzzDm)
>       msgPin(userWoody.token, aMsg.messageId, ctx)

httpTests/messageTests/test_message_unpin.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_________________________ testGlobalOwnerCantUnpinInDm _________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=2, members=[1], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0f370>
ctx = None

    @iteration3
    def testGlobalOwnerCantUnpinInDm(userBuzz, userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_unpin.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testNonmemberCantUnpin ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dced5a0>
ctx = None

    @iteration3
    def testNonmemberCantUnpin(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        msgPin(userWoody.token, aMsg.messageId, ctx)
        with pytest.raises(InputError):
>           messageUnpin(userZerg.token, aMsg.messageId, ctx)

httpTests/messageTests/test_message_unpin.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:63: in messageUnpin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________ testSuccessfulUnreactInChannel ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcedab0>
ctx = None

    @iteration3
    def testSuccessfulUnreactInChannel(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        msgReact(userWoody.token, aMsg.messageId, REACT, ctx)
        msgReact(userBuzz.token, aMsg.messageId, REACT, ctx)
    
        assert messageUnreact(userWoody.token, aMsg.messageId, REACT, ctx) == {}
        assert messageUnreact(userBuzz.token, aMsg.messageId, REACT, ctx) == {}
    
>       woodysVw = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)['messages'][0]['reacts'][0]
E       IndexError: list index out of range

httpTests/messageTests/test_message_unreact.py:31: IndexError
_______________________ testSuccessfulUnreactToDmMessage _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dceee60>
ctx = None

    @iteration3
    def testSuccessfulUnreactToDmMessage(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodyAndBuzzDm)

httpTests/messageTests/test_message_unreact.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userFactory = <function userFactory.<locals>.makeUser at 0x7f955dd0df30>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
        assert usersAll(userWoody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
            usersAll(userWoody.token, ctx)
    
        loner = userFactory('bob@gmail.com', 'aweakpassword', 'nameFirst', 'nameLast')
    
>       lonerProf = userProfile(loner.token, loner.uId, ctx)['user']
E       KeyError: 'user'

httpTests/otherTests/test_clear.py:27: KeyError
__________________ testTagThruMessageSendTriggersNotification __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de0f7f0>
ctx = None

    @iteration3
    def testTagThruMessageSendTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodysPublicToybox, content)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           'hi'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            'hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:26: AssertionError
_____________________________ testTagNotInChannel ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0c0d0>
ctx = None

    @iteration3
    def testTagNotInChannel(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        content = f'@{userBuzz.handleStr} hi'
        messageFactory(userWoody, woodysPublicToybox, content)
    
        notifs = notificationsGet(userBuzz.token, ctx)
    
>       assert notifs == {'notifications': []}
E       AssertionError: assert [] == {'notifications': []}
E         +[]
E         -{'notifications': []}
E         Full diff:
E         - {'notifications': []}
E         + []

httpTests/otherTests/test_notifications_get.py:40: AssertionError
___________________ testMultipleSameTagsOnlyOneNotification ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcecdc0>
ctx = None

    @iteration3
    def testMultipleSameTagsOnlyOneNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        content = f'@{userWoody.handleStr} @{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodysPublicToybox, content)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ @ '\n                                           'hi'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ @ '
E         -                                            'hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:52: AssertionError
_________________________________ testTagSelf __________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0c820>
ctx = None

    @iteration3
    def testTagSelf(userWoody, woodysPublicToybox, messageFactory, ctx):
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userWoody, woodysPublicToybox, content)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userWoody.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           'hi'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            'hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:66: AssertionError
_______________________________ testMultipleTags _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=3, token='4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcef880>
ctx = None

    @iteration3
    def testMultipleTags(userWoody, userBuzz, userZerg, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
        content = f'@{userWoody.handleStr} hi @{userZerg.handleStr}'
        messageFactory(userBuzz, woodysPublicToybox, content)
    
        notifsWoody = notificationsGet(userWoody.token, ctx)
    
>       assert notifsWoody == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ hi '\n                                           '@'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ hi @'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ hi '
E         -                                            '@'}],
E         - }

httpTests/otherTests/test_notifications_get.py:83: AssertionError
_________________ testTagThruMessageSenddmTriggersNotification _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de0d870>
ctx = None

    @iteration3
    def testTagThruMessageSenddmTriggersNotification(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodyAndBuzzDm, content)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': -1,
            'dmId': woodyAndBuzzDm.dmId,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodyAndBuzzDm.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': -1,\n                    'dmId': 1,\n                    'notificationMessage': ' tagged you in : @ hi'}]}
E         +[]
E         -{'notifications': [{'channelId': -1, 'dmId': 1, 'notificationMessage': ' tagged you in : @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': -1,
E         -                     'dmId': 1,
E         -                     'notificationMessage': ' tagged you in : @ hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:110: AssertionError
__________________ testTagThruMessageEditTriggersNotification __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcec8b0>
ctx = None

    @iteration3
    def testTagThruMessageEditTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        aMsg = messageFactory(userBuzz, woodysPublicToybox)
    
        content = f'@{userWoody.handleStr} hi'
        messageEdit(userBuzz.token, aMsg.messageId, content, ctx)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           'hi'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            'hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:128: AssertionError
_________________ testTagThruMessageShareTriggersNotification __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de0f0a0>
ctx = None

    @iteration3
    def testTagThruMessageShareTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        messageShare(userBuzz.token, aMsg.messageId, f'@{userWoody.handleStr}', woodysPublicToybox.channelId, -1,
                      ctx)
    
>       notifs = notificationsGet(userWoody.token, ctx)['notifications']
E       TypeError: list indices must be integers or slices, not str

httpTests/otherTests/test_notifications_get.py:144: TypeError
_______________ testTagThruMessageSendlaterTriggersNotification ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1a170>
ctx = None

    @iteration3
    def testTagThruMessageSendlaterTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodysPublicToybox, content, delay=1)
    
        sleep(2)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           'hi'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            'hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:170: AssertionError
___________________ testMessageSendlaterTagNotifiesWhenSent ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0c3a0>
ctx = None

    @iteration3
    def testMessageSendlaterTagNotifiesWhenSent(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodysPublicToybox, content, delay=2)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': []}
E       AssertionError: assert [] == {'notifications': []}
E         +[]
E         -{'notifications': []}
E         Full diff:
E         - {'notifications': []}
E         + []

httpTests/otherTests/test_notifications_get.py:186: AssertionError
______________ testTagThruMessageSendlaterdmTriggersNotification _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0d5a0>
ctx = None

    @iteration3
    def testTagThruMessageSendlaterdmTriggersNotification(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodyAndBuzzDm, content, delay=1)
    
        sleep(2)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': -1,
            'dmId': woodyAndBuzzDm.dmId,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodyAndBuzzDm.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': -1,\n                    'dmId': 1,\n                    'notificationMessage': ' tagged you in : @ hi'}]}
E         +[]
E         -{'notifications': [{'channelId': -1, 'dmId': 1, 'notificationMessage': ' tagged you in : @ hi'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': -1,
E         -                     'dmId': 1,
E         -                     'notificationMessage': ' tagged you in : @ hi'}],
E         - }

httpTests/otherTests/test_notifications_get.py:208: AssertionError
___________ testTagNotificationMessagePreviewLength[a small message] ___________

content = 'a small message @'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1a4d0>
ctx = None

    @iteration3
    @pytest.mark.parametrize('content', ['a small message', 'AAAAAAA' * 50])
    def testTagNotificationMessagePreviewLength(content, userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        # tags happen anywhere
        content += f' @{userWoody.handleStr}'
    
        messageFactory(userBuzz, woodysPublicToybox, content)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: a '\n                                           'small message @'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: a small message @'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: a '
E         -                                            'small message @'}],
E         - }

httpTests/otherTests/test_notifications_get.py:227: AssertionError
_ testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

content = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA @'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcef400>
ctx = None

    @iteration3
    @pytest.mark.parametrize('content', ['a small message', 'AAAAAAA' * 50])
    def testTagNotificationMessagePreviewLength(content, userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        # tags happen anywhere
        content += f' @{userWoody.handleStr}'
    
        messageFactory(userBuzz, woodysPublicToybox, content)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: '\n                                           'AAAAAAAAAAAAAAAAAAAA'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: AAAAAAAAAAAAAAAAAAAA'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: '
E         -                                            'AAAAAAAAAAAAAAAAAAAA'}],
E         - }

httpTests/otherTests/test_notifications_get.py:227: AssertionError
______________________ testReactTriggersNotification[ch] _______________________

dest = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd18280>
ctx = None

    @iteration3
    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def testReactTriggersNotification(dest, userWoody, userBuzz, woodysPublicToybox, woodyAndBuzzDm, messageFactory, ctx):
        if dest == 'ch':
            channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        dest = woodysPublicToybox if dest == 'ch' else woodyAndBuzzDm
    
        aMsg = messageFactory(userWoody, dest)
    
        messageReact(userBuzz.token, aMsg.messageId, 1, ctx)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId if dest == woodysPublicToybox else -1,
            'dmId': woodyAndBuzzDm.dmId if dest == woodyAndBuzzDm else -1,
            'notificationMessage': f'{userBuzz.handleStr} reacted to your message in {dest.name}'
        }]}
E       AssertionError: assert [{'channelId': 1,\n  'dmId': -1,\n  'notificationMessage': 'buzzlightyear reacted to your message in woodys '\n                         'toybox'}] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' reacted to your message in woodys '\n                                           'toybox'}]}
E         +[{'channelId': 1, 'dmId': -1, 'notificationMessage': 'buzzlightyear reacted to your message in woodys toybox'}]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' reacted to your message in woodys toybox'}]}
E         Full diff:
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         + [
E         +  {'channelId': 1,
E         +   'dmId': -1,
E         -                     'notificationMessage': ' reacted to your message in woodys '
E         ? ------------------
E         +   'notificationMessage': 'buzzlightyear reacted to your message in woodys '
E         ?                           +++++++++++++
E         -                                            'toybox'}],
E         ? ------------------                                  -
E         +                          'toybox'},
E         - }
E         + ]

httpTests/otherTests/test_notifications_get.py:248: AssertionError
______________________ testReactTriggersNotification[dm] _______________________

dest = DM(owner=1, members=[2], name='', dmId=1)
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd61d80>
ctx = None

    @iteration3
    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def testReactTriggersNotification(dest, userWoody, userBuzz, woodysPublicToybox, woodyAndBuzzDm, messageFactory, ctx):
        if dest == 'ch':
            channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        dest = woodysPublicToybox if dest == 'ch' else woodyAndBuzzDm
    
>       aMsg = messageFactory(userWoody, dest)

httpTests/otherTests/test_notifications_get.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________ testAddThruChInviteTriggersNotification ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dced870>
ctx = None

    @iteration3
    def testAddThruChInviteTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        notifs = notificationsGet(userBuzz.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userWoody.handleStr} added you to {woodysPublicToybox.name}'
        }]}
E       AssertionError: assert [{'channelId': 1,\n  'dmId': -1,\n  'notificationMessage': 'sheriffwoody added you to woodys toybox'}] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' added you to woodys toybox'}]}
E         +[{'channelId': 1, 'dmId': -1, 'notificationMessage': 'sheriffwoody added you to woodys toybox'}]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' added you to woodys toybox'}]}
E         Full diff:
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         + [
E         +  {'channelId': 1,
E         +   'dmId': -1,
E         -                     'notificationMessage': ' added you to woodys toybox'}],
E         ? ------------------                                                       -
E         +   'notificationMessage': 'sheriffwoody added you to woodys toybox'},
E         ?                           ++++++++++++
E         - }
E         + ]

httpTests/otherTests/test_notifications_get.py:261: AssertionError
___________________ testAddThruDmCreateTriggersNotification ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    @iteration3
    def testAddThruDmCreateTriggersNotification(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        buzzsNotifs = notificationsGet(userBuzz.token, ctx)
    
>       assert buzzsNotifs == {'notifications': [{
            'channelId': -1,
            'dmId': woodyAndBuzzDm.dmId,
            'notificationMessage': f'{userWoody.handleStr} added you to {woodyAndBuzzDm.name}'
        }]}
E       AssertionError: assert [{'channelId': -1,\n  'dmId': 1,\n  'notificationMessage': 'sheriffwoody added you to buzzlightyear'}] == {'notifications': [{'channelId': -1,\n                    'dmId': 1,\n                    'notificationMessage': ' added you to '}]}
E         +[{'channelId': -1, 'dmId': 1, 'notificationMessage': 'sheriffwoody added you to buzzlightyear'}]
E         -{'notifications': [{'channelId': -1, 'dmId': 1, 'notificationMessage': ' added you to '}]}
E         Full diff:
E         - {
E         -  'notifications': [{'channelId': -1,
E         -                     'dmId': 1,
E         -                     'notificationMessage': ' added you to '}],
E         - }
E         + [
E         +  {'channelId': -1,
E         +   'dmId': 1,
E         +   'notificationMessage': 'sheriffwoody added you to buzzlightyear'},
E         + ]

httpTests/otherTests/test_notifications_get.py:272: AssertionError
____________________ testMostRecent_20NotificationsFetched _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd18820>
ctx = None

    @iteration3
    def testMostRecent_20NotificationsFetched(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        expected = {'notifications': []}
        for ix in range(30):
            content = f'@{userWoody.handleStr} {ix}'
            messageFactory(userBuzz, woodysPublicToybox, content)
    
            if ix >= 10:
                expected['notifications'].insert(0, {
                    'channelId': woodysPublicToybox.channelId,
                    'dmId': -1,
                    'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
                })
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == expected
E       AssertionError: assert [] == {'notifications': [{'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '29'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '28'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '27'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '26'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '25'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '24'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '23'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '22'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '21'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '20'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '19'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '18'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '17'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '16'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '15'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '14'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '13'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '12'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '11'},\n                   {'channelId': 1,\n                    'dmId': -1,\n                    'notificationMessage': ' tagged you in woodys toybox: @ '\n                                           '10'}]}
E         +[]
E         -{'notifications': [{'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 29'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 28'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 27'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 26'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 25'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 24'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 23'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 22'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 21'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 20'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 19'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 18'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 17'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 16'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 15'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 14'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 13'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 12'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 11'}, {'channelId': 1, 'dmId': -1, 'notificationMessage': ' tagged you in woodys toybox: @ 10'}]}
E         Full diff:
E         + [
E         +  ,
E         + ]
E         - {
E         -  'notifications': [{'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '29'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '28'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '27'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '26'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '25'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '24'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '23'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '22'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '21'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '20'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '19'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '18'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '17'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '16'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '15'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '14'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '13'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '12'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '11'},
E         -                    {'channelId': 1,
E         -                     'dmId': -1,
E         -                     'notificationMessage': ' tagged you in woodys toybox: @ '
E         -                                            '10'}],
E         - }

httpTests/otherTests/test_notifications_get.py:297: AssertionError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________________ testNoMatches _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testNoMatches(userBuzz, ctx):
>       msgs = search(userBuzz.token, 'No matches', ctx)

httpTests/otherTests/test_search.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
___________________________ testCaseInsensitiveMatch ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1a440>
ctx = None

    @iteration3
    def testCaseInsensitiveMatch(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox, 'AnYthing')
    
        msgs = search(userWoody.token, 'aNy', ctx)
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
>       assert msgs['messages'] == chMsgs['messages']
E       AssertionError: assert [] == [{'isPinned': False,\n  'message': 'AnYthing',\n  'messageId': 817,\n  'reacts': [],\n  'timeSent': 1660487355,\n  'uId': 1}]
E         Right contains one more item: {'isPinned': False, 'message': 'AnYthing', 'messageId': 817, 'reacts': [], ...}
E         Full diff:
E           [
E         +  ,
E         -  {'isPinned': False,
E         -   'message': 'AnYthing',
E         -   'messageId': 817,
E         -   'reacts': [],
E         -   'timeSent': 1660487355,
E         -   'uId': 1},
E           ]

httpTests/otherTests/test_search.py:44: AssertionError
_____________________ testSearchIncludesOnlyJoinedChannels _____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[2], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dc7ad40>
ctx = None

    @iteration3
    def testSearchIncludesOnlyJoinedChannels(userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        messageFactory(userBuzz, woodysPublicToybox, 'anything')
    
        channelLeave(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       msgs = search(userBuzz.token, 'any', ctx)

httpTests/otherTests/test_search.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testSuccessfulUsersAll ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
ctx = None

    def testSuccessfulUsersAll(userWoody, userBuzz, ctx):
        users = usersAll(userWoody.token, ctx)['users']
        users.sort(key=lambda u: u['handleStr'])
    
        for detail, usr in zip(users, (userBuzz, userWoody)):
            assert detail['uId'] == usr.uId
            assert detail['email'] == usr.email
            assert detail['nameFirst'] == usr.nameFirst
            assert detail['nameLast'] == usr.nameLast
>           assert detail['handleStr'] == usr.handleStr
E           AssertionError: assert 'buzzlightyear' == ''
E             + buzzlightyear

httpTests/otherTests/test_users_all.py:23: AssertionError
__________________ testMessagesBufferedAndDisplayedCorrectly ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
standupFactory = <function standupFactory.<locals>.makeStandup at 0x7f955dd18ca0>
ctx = None

    @iteration3
    def testMessagesBufferedAndDisplayedCorrectly(userWoody, userBuzz, woodysPublicToybox, standupFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        std = standupFactory(userWoody, woodysPublicToybox, 1)
    
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'welcome', ctx)
        standupSend(userBuzz.token, woodysPublicToybox.channelId, 'to the', ctx)
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'black parade', ctx)
    
        sleep(2)
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)['messages']
        expected = '\n'.join([
            f'{userWoody.handleStr}: welcome',
            f'{userBuzz.handleStr}: to the',
            f'{userWoody.handleStr}: black parade'
        ])
    
>       assert len(chMsgs) == 1 and chMsgs[0]['message'] == expected and chMsgs[0]['timeSent'] == std.timeFinish
E       AssertionError: assert (1 == 1
E         +1
E         -1 and 'sheriffwoody: welcome\nbuzzlightyear: to the\nsheriffwoody: black parade' == ': welcome\n: to the\n: black parade'
E         - : welcome
E         - : to the
E         - : black parade
E         + sheriffwoody: welcome
E         + buzzlightyear: to the
E         + sheriffwoody: black parade)

httpTests/standupTests/test_standup_send.py:35: AssertionError
________________________ testStandupSendsAfterLoggedOut ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
standupFactory = <function standupFactory.<locals>.makeStandup at 0x7f955dc78ca0>
ctx = None

    @iteration3
    def testStandupSendsAfterLoggedOut(userWoody, userBuzz, woodysPublicToybox, standupFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        std = standupFactory(userWoody, woodysPublicToybox, 2)
    
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'hello', ctx)
    
        authLogout(userWoody.token, ctx)
    
        sleep(2)
    
        chMsgs = channelMessages(userBuzz.token, woodysPublicToybox.channelId, 0, ctx)['messages']
        expected = f'{userWoody.handleStr}: hello'
    
>       assert len(chMsgs) == 1 and chMsgs[0]['message'] == expected and chMsgs[0]['timeSent'] == std.timeFinish
E       AssertionError: assert (1 == 1
E         +1
E         -1 and 'sheriffwoody: hello' == ': hello'
E         - : hello
E         + sheriffwoody: hello)

httpTests/standupTests/test_standup_send.py:52: AssertionError
____________________________ testStandupNoMessages _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testStandupNoMessages(userWoody, woodysPublicToybox, ctx):
        ret = standupStart(userWoody.token, woodysPublicToybox.channelId, 1, ctx)
    
        sleep(2)
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
>       assert len(chMsgs['messages']) == 0
E       assert 1 == 0
E         +1
E         -0

httpTests/standupTests/test_standup_start.py:34: AssertionError
_______________________ testStandupRestartableAfterLapse _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testStandupRestartableAfterLapse(userWoody, woodysPublicToybox, ctx):
        standupStart(userWoody.token, woodysPublicToybox.channelId, 1, ctx)
        sleep(2)
    
>       assert standupStart(userWoody.token, woodysPublicToybox.channelId, 1, ctx) is not None

httpTests/standupTests/test_standup_start.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:11: in standupStart
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
        stats = userStats(userWoody.token, ctx)
    
>       assert 'userStats' in stats
E       AssertionError: assert 'userStats' in {'channelsJoined': [{'numChannelsJoined': 0, 'timeStamp': 1660487375}], 'dmsJoined': [{'numDmsJoined': 0, 'timeStamp': 1660487375}], 'involvementRate': 0, 'messagesSent': [{'numMessagesSent': 0, 'timeStamp': 1660487375}]}

httpTests/statsTests/test_user_stats.py:23: AssertionError
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f955dd600d0>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
        channelFactory(userWoody, 'poop', True)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:45: KeyError
________________________ testChannelsTrackedChannelJoin ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    @iteration3
    def testChannelsTrackedChannelJoin(userWoody, zergsPrivateLair, ctx):
        channelJoin(userWoody.token, zergsPrivateLair.channelId, ctx)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:56: KeyError
_______________________ testChannelsTrackedChannelInvite _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[2], allMembers=[])
ctx = None

    @iteration3
    def testChannelsTrackedChannelInvite(userWoody, userZerg, zergsPrivateLair, ctx):
        channelInvite(userZerg.token, zergsPrivateLair.channelId, userWoody.uId, ctx)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:67: KeyError
_______________________ testChannelsTrackedChannelLeave ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testChannelsTrackedChannelLeave(userWoody, woodysPublicToybox, ctx):
        channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:78: KeyError
____________________________ testSmsTrackedSmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f955de1e8c0>, ctx = None

    @iteration3
    def testSmsTrackedSmCreate(userWoody, dmFactory, ctx):
        dmFactory(userWoody, [])
    
>       dmStats = userStats(userWoody.token, ctx)['userStats']['dmsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:89: KeyError
________________________ testMessagesTrackedMessageSend ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0feb0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSend(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:124: KeyError
_____________________ testMessagesTrackedMessageSendlater ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0f520>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSendlater(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox, delay=1)
    
        sleep(1.5)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:137: KeyError
_______________________ testMessagesTrackedMessageShare ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd180d0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageShare(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        messageShare(userWoody.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:173: KeyError
_______________________ testMessagesTrackedStandupFinish _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
standupFactory = <function standupFactory.<locals>.makeStandup at 0x7f955dd0eb00>
ctx = None

    @iteration3
    def testMessagesTrackedStandupFinish(userWoody, woodysPublicToybox, standupFactory, ctx):
        standupFactory(userWoody, woodysPublicToybox, 1)
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'hi', ctx)
    
        sleep(2)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:187: KeyError
____________________________ testInvolvementTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f955de1de10>
ctx = None

    @iteration3
    def testInvolvementTracked(userWoody, userZerg, channelFactory, ctx):
>       stats = userStats(userWoody.token, ctx)['userStats']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:196: KeyError
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
        stats = usersStats(userWoody.token, ctx)
    
>       assert 'workspaceStats' in stats
E       AssertionError: assert 'workspaceStats' in {'channelsExist': [{'numChannelsExist': 0, 'timeStamp': 1660487379}], 'dmsExist': [{'numDmsExist': 0, 'timeStamp': 1660487379}], 'messagesExist': [{'numMessagesExist': 0, 'timeStamp': 1660487379}], 'utilizationRate': 0}

httpTests/statsTests/test_users_stats.py:22: AssertionError
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f955dd0c700>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
        channelFactory(userWoody, 'poop', True)
    
>       chStats = usersStats(userWoody.token, ctx)['workspaceStats']['channelsExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:48: KeyError
____________________________ testDmsTrackedDmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f955dd0c820>, ctx = None

    @iteration3
    def testDmsTrackedDmCreate(userWoody, dmFactory, ctx):
        dmFactory(userWoody, [])
    
>       dmStats = usersStats(userWoody.token, ctx)['workspaceStats']['dmsExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:59: KeyError
____________________________ testDmsTrackedDmRemove ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1), ctx = None

    @iteration3
    def testDmsTrackedDmRemove(userWoody, woodyAndBuzzDm, ctx):
        dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
    
>       dmStats = usersStats(userWoody.token, ctx)['workspaceStats']['dmsExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:70: KeyError
________________________ testMessagesTrackedMessageSend ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1b5b0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSend(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:81: KeyError
_____________________ testMessagesTrackedMessageSendlater ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd0dcf0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSendlater(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox, delay=1)
    
        sleep(1.5)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:94: KeyError
_______________________ testMessagesTrackedMessageSenddm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd18550>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSenddm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       messageFactory(userWoody, woodyAndBuzzDm)

httpTests/statsTests/test_users_stats.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________ testMessagesTrackedMessageSenddmlater _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd1b1c0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSenddmlater(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       messageFactory(userWoody, woodyAndBuzzDm, delay=1)

httpTests/statsTests/test_users_stats.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:99: in makeMessage
    msgId = message.messageSendlaterdm(poster.token, location.dmId, content, tts, ctx)['messageId']
httpTests/fakepi/message.py:141: in messageSendlaterdm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
_______________________ testMessagesTrackedMessageShare ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dd62050>
ctx = None

    @iteration3
    def testMessagesTrackedMessageShare(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        messageShare(userWoody.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:130: KeyError
_______________________ testMessagesTrackedStandupFinish _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
standupFactory = <function standupFactory.<locals>.makeStandup at 0x7f955dd0eb00>
ctx = None

    @iteration3
    def testMessagesTrackedStandupFinish(userWoody, woodysPublicToybox, standupFactory, ctx):
        standupFactory(userWoody, woodysPublicToybox, 1)
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'hi', ctx)
    
        sleep(2)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:144: KeyError
______________________ testMessagesTrackedEditedToRemoval ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dcedf30>
ctx = None

    @iteration3
    def testMessagesTrackedEditedToRemoval(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        messageEdit(userWoody.token, aMsg.messageId, '', ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:157: KeyError
__________________________ testMessagesTrackedDeleted __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955dceedd0>
ctx = None

    @iteration3
    def testMessagesTrackedDeleted(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        messageRemove(userWoody.token, aMsg.messageId, ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:170: KeyError
_________________________ testMessagesTrackedDmRemoved _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
woodyAndBuzzDm = DM(owner=1, members=[2], name='', dmId=1)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f955de0c3a0>
ctx = None

    @iteration3
    def testMessagesTrackedDmRemoved(userWoody, woodyAndBuzzDm, messageFactory, ctx):
>       messageFactory(userWoody, woodyAndBuzzDm)

httpTests/statsTests/test_users_stats.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:104: in makeMessage
    msgId = message.messageSenddm(poster.token, location.dmId, content, ctx)['messageId']
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           httpTests.error.AccessError: 403 Forbidden: None

httpTests/fakepi/util.py:95: AccessError
____________________________ testUtilizationTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f955dcece50>
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f955dceeb00>, ctx = None

    @iteration3
    def testUtilizationTracked(userWoody, userZerg, channelFactory, dmFactory, ctx):
>       stats = usersStats(userWoody.token, ctx)['workspaceStats']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:192: KeyError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
>       with pytest.raises(AccessError):
E       Failed: DID NOT RAISE <class 'httpTests.error.AccessError'>

httpTests/statsTests/test_users_stats.py:209: Failed
_____________________________ testUserProfileValid _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testUserProfileValid(userWoody, ctx):
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/userTests/test_user_profile.py:15: KeyError
__________________________ testSuccessfulEmailChange ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testSuccessfulEmailChange(userWoody, ctx):
        newEmail = 'toystory3@pixar.com'
        userProfileSetemail(userWoody.token, newEmail, ctx)
    
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/userTests/test_user_profile_setemail.py:18: KeyError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSetemail(userWoody.token, userWoody.email, ctx)

httpTests/userTests/test_user_profile_setemail.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
__________________________ testSuccessfulHandleChange __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testSuccessfulHandleChange(userWoody, ctx):
        newHandle = 'www'
>       userProfileSethandle(userWoody.token, newHandle, ctx)

httpTests/userTests/test_user_profile_sethandle.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSethandle(userWoody.token, userWoody.handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
_______________________ testUserProfileSetnameValidName ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testUserProfileSetnameValidName(userWoody, ctx):
        #  woody became japanese with family coming first
        userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)
    
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/userTests/test_user_profile_setname.py:18: KeyError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)

httpTests/userTests/test_user_profile_setname.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:93: InputError
______________________ testInvalidDimensions[-1000-0-0-0] ______________________

xminDiff = -1000, ymaxDiff = 0, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
>       with pytest.raises(InputError):
E       Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_uploadphoto.py:33: Failed
______________________ testInvalidDimensions[0--1000-0-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = 0, yminDiff = -1000
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
>       with pytest.raises(InputError):
E       Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_uploadphoto.py:33: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidToken(userWoody, img, ctx):
        authLogout(userWoody.token, ctx)
>       with pytest.raises(AccessError):
E       Failed: DID NOT RAISE <class 'httpTests.error.AccessError'>

httpTests/userTests/test_user_profile_uploadphoto.py:69: Failed
=========================== short test summary info ============================
FAILED httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything
FAILED httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll
FAILED httpTests/adminTests/test_admin_user_remove.py::testEmailReusable - ht...
FAILED httpTests/adminTests/test_admin_user_remove.py::testHandleReusable - h...
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidUser - http...
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission
FAILED httpTests/authTests/test_auth_login.py::testSuccessfulLogin - Assertio...
FAILED httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - reque...
FAILED httpTests/authTests/test_auth_register.py::testRemovedUserName - KeyEr...
FAILED httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere
FAILED httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword
FAILED httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
FAILED httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
FAILED httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner
FAILED httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate
FAILED httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic
FAILED httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - IndexE...
FAILED httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - http...
FAILED httpTests/dmTests/test_dm_create.py::testInvalidToken - httpTests.erro...
FAILED httpTests/dmTests/test_dm_details.py::testMemberSuccessful - Assertion...
FAILED httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - ht...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInOneDm - AssertionError: a...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - AssertionEr...
FAILED httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - ht...
FAILED httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - htt...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - ht...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
FAILED httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages - http...
FAILED httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
FAILED httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
FAILED httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm
FAILED httpTests/messageTests/test_message_meta.py::testMessageIdsUnique - ht...
FAILED httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3
FAILED httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm
FAILED httpTests/messageTests/test_message_pin.py::testDmMemberCantPin - Fail...
FAILED httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm
FAILED httpTests/messageTests/test_message_pin.py::testNonmemberCantPin - htt...
FAILED httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel
FAILED httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage
FAILED httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
FAILED httpTests/messageTests/test_message_senddm.py::testValidMessage - http...
FAILED httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately
FAILED httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent
FAILED httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage
FAILED httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately
FAILED httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent
FAILED httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm
FAILED httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True]
FAILED httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False]
FAILED httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm
FAILED httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel
FAILED httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm
FAILED httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId
FAILED httpTests/messageTests/test_message_share.py::testInvalidToken - Excep...
FAILED httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm
FAILED httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel
FAILED httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin - ...
FAILED httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm
FAILED httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin
FAILED httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel
FAILED httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage
FAILED httpTests/otherTests/test_clear.py::testClearWorks - KeyError: 'user'
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagNotInChannel - ...
FAILED httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagSelf - Assertio...
FAILED httpTests/otherTests/test_notifications_get.py::testMultipleTags - Ass...
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message]
FAILED httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
FAILED httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch]
FAILED httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm]
FAILED httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched
FAILED httpTests/otherTests/test_notifications_get.py::testInvalidToken - Exc...
FAILED httpTests/otherTests/test_search.py::testNoMatches - httpTests.error.A...
FAILED httpTests/otherTests/test_search.py::testCaseInsensitiveMatch - Assert...
FAILED httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels
FAILED httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - Asser...
FAILED httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly
FAILED httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut
FAILED httpTests/standupTests/test_standup_start.py::testStandupNoMessages - ...
FAILED httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse
FAILED httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect - Asser...
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave
FAILED httpTests/statsTests/test_user_stats.py::testSmsTrackedSmCreate - KeyE...
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish
FAILED httpTests/statsTests/test_user_stats.py::testInvolvementTracked - KeyE...
FAILED httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect - Asse...
FAILED httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate - Key...
FAILED httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove - Key...
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved
FAILED httpTests/statsTests/test_users_stats.py::testUtilizationTracked - Key...
FAILED httpTests/statsTests/test_users_stats.py::testInvalidToken - Failed: D...
FAILED httpTests/userTests/test_user_profile.py::testUserProfileValid - KeyEr...
FAILED httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - ...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - h...
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmLeave
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmRemove
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater
================== 155 failed, 207 passed, 4 errors in 44.13s ==================
