============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-4.19.0-0.bpo.19-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1
collecting ... collected 366 items

httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testEmailReusable ERROR  [  1%]
httpTests/adminTests/test_admin_user_remove.py::testHandleReusable ERROR [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidUser ERROR    [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner ERROR [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner ERROR [  3%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidToken ERROR   [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange ERROR [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner ERROR [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions ERROR [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser ERROR [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission ERROR [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission ERROR [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken ERROR [  5%]
httpTests/authTests/test_auth_login.py::testSuccessfulLogin ERROR        [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions ERROR     [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser FAILED      [  6%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword ERROR [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout ERROR      [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] FAILED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] FAILED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] FAILED [  9%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail FAILED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName FAILED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration ERROR [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] ERROR [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ERROR [ 11%]
httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect ERROR [ 11%]
httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere ERROR [ 12%]
httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken ERROR  [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidToken ERROR   [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid ERROR      [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken ERROR  [ 19%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken ERROR     [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid ERROR [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId ERROR [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken ERROR [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] ERROR [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] ERROR [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken ERROR [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels ERROR [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] ERROR [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken ERROR [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken ERROR [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation ERROR      [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple ERROR    [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers ERROR          [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid ERROR    [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate ERROR     [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken ERROR              [ 33%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful ERROR         [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful ERROR   [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId ERROR              [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken ERROR             [ 34%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully ERROR  [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember ERROR       [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId ERROR                [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken ERROR               [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms ERROR           [ 36%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm ERROR            [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken ERROR            [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent ERROR  [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent ERROR   [ 37%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected ERROR  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval ERROR       [ 39%]
httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm ERROR [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId ERROR               [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken ERROR              [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken ERROR      [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique ERROR  [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3 ERROR [ 43%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testInvalidMessageId ERROR   [ 45%]
httpTests/messageTests/test_message_pin.py::testCannotPinTwice ERROR     [ 45%]
httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin ERROR [ 45%]
httpTests/messageTests/test_message_pin.py::testDmMemberCantPin ERROR    [ 45%]
httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm ERROR [ 46%]
httpTests/messageTests/test_message_pin.py::testNonmemberCantPin ERROR   [ 46%]
httpTests/messageTests/test_message_pin.py::testInvalidToken ERROR       [ 46%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel ERROR [ 46%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage ERROR [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidMessageId ERROR [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidReactId ERROR   [ 47%]
httpTests/messageTests/test_message_react.py::testCantReactTwice ERROR   [ 48%]
httpTests/messageTests/test_message_react.py::testNonmemberCannotReact ERROR [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidToken ERROR     [ 48%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage ERROR [ 48%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testInvalidToken ERROR    [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage ERROR      [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost ERROR     [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel ERROR    [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] ERROR  [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken ERROR      [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage ERROR    [ 51%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost ERROR   [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm ERROR       [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] ERROR [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken ERROR    [ 53%]
httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage ERROR [ 53%]
httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately ERROR [ 53%]
httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[] ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidChannel ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidToken ERROR [ 55%]
httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[] ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm ERROR  [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True] ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False] ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testInvalidOgMessageId ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testInvalidMessageLength ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testShareToInvalidDmId ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidToken ERROR     [ 61%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testInvalidMessageId ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin ERROR [ 64%]
httpTests/messageTests/test_message_unpin.py::testInvalidToken ERROR     [ 64%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel ERROR [ 64%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidMessageId ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidReactId ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact ERROR [ 66%]
httpTests/messageTests/test_message_unreact.py::testInvalidToken ERROR   [ 66%]
httpTests/otherTests/test_clear.py::testClearWorks ERROR                 [ 66%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification ERROR [ 66%]
httpTests/otherTests/test_notifications_get.py::testTagNotInChannel ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagSelf ERROR        [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleTags ERROR   [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message] ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testInvalidToken ERROR   [ 71%]
httpTests/otherTests/test_search.py::testNoMatches ERROR                 [ 72%]
httpTests/otherTests/test_search.py::testSingleMatch ERROR               [ 72%]
httpTests/otherTests/test_search.py::testCaseInsensitiveMatch ERROR      [ 72%]
httpTests/otherTests/test_search.py::testMultipleMatches ERROR           [ 72%]
httpTests/otherTests/test_search.py::testMultipleChannelsJoined ERROR    [ 73%]
httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels ERROR [ 73%]
httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser ERROR [ 73%]
httpTests/otherTests/test_search.py::testInvalidSearch[] ERROR           [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] ERROR [ 74%]
httpTests/otherTests/test_search.py::testInvalidToken ERROR              [ 74%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll ERROR     [ 74%]
httpTests/otherTests/test_users_all.py::testInvalidToken ERROR           [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True] ERROR [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False] ERROR [ 75%]
httpTests/standupTests/test_standup_active.py::testActiveStandup ERROR   [ 75%]
httpTests/standupTests/test_standup_active.py::testInactiveStandup ERROR [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidChannelId ERROR [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidToken ERROR    [ 76%]
httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testReturnFormat ERROR      [ 77%]
httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidMessageLength ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidChannelId ERROR  [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidToken ERROR      [ 78%]
httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupNoMessages ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testReturnsImmediately ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testInvalidStandupLength ERROR [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidChannelId ERROR [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidToken ERROR     [ 81%]
httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect ERROR     [ 81%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate ERROR [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin ERROR [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite ERROR [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave ERROR [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmCreate ERROR    [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmLeave ERROR     [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmRemove ERROR    [ 83%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testInvolvementTracked ERROR    [ 85%]
httpTests/statsTests/test_user_stats.py::testInvalidToken ERROR          [ 86%]
httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect ERROR    [ 86%]
httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate ERROR [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate ERROR   [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove ERROR   [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testUtilizationTracked ERROR   [ 89%]
httpTests/statsTests/test_users_stats.py::testInvalidToken ERROR         [ 90%]
httpTests/userTests/test_user_profile.py::testUserProfileValid ERROR     [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser ERROR          [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken ERROR         [ 90%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange ERROR [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail ERROR [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] ERROR [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] ERROR [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] ERROR [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken ERROR [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName ERROR [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken ERROR [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect ERROR [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg ERROR [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0] ERROR [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0] ERROR [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0] ERROR [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000] ERROR [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue ERROR [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue ERROR [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl ERROR [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken ERROR [100%]

==================================== ERRORS ====================================
_____________ ERROR at setup of testOnceRemovedUserCantDoAnything ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1809a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testMessagesAfterUserRemovalCorrectFormat __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd17d3e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______ ERROR at setup of testRemovedProfileStillFetchableWithUserProfile _______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd17dd550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testRemovalRemovedFromChannel ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd17d3d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testRemovalRemovedFromDm __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd21e53a0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testRemovalNotInUsersAll __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd17ddaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testEmailReusable ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1744a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testHandleReusable _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1744af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidUser _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd17790d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testCannotRemoveLastOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1779940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testCannotRemoveUserNonowner ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd177e820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd177ef70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testSuccessfulPermissionChange _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd16e6d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testCannotDemoteLastOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd16e6790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testNonownerCantChangePermissions ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1703dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidUser _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1703670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInvalidPermission ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1703d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testSamePermission _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd170a9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd170af70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testSuccessfulLogin _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd179a9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testCanHaveTwoSessions ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd179af70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testRegisteredButIncorrectPassword _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd16be310>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testSuccessfulLogout ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd17c69d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testSuccessfulRegistration _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd169edc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1654a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1654700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1654ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1682e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testReturnFormatCorrect ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1682dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testPasswordRequestLogsOutEverywhere ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1648d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testChannelOwnerCanAddownerWhenMember ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd164a8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testChannelOwnerCantAddownerWhenNonMember __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd169eca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testNonMemberCannotAddOwner _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd169e9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPrivate _________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd169d700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPublic _________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd169dca0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testMemberCannotAddOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd169de50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testCannotAddownerPrexistingChannelOwner __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15faca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testWithInvalidUId _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15fa9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testWithInvalidChannelId __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15fab80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd16038b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testMemberSuccessful ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1603a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd159c8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd159cca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15ca820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testDuplicateInvite _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15caee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInviteGlobalOwner ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15cfe50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInviteGlobalMember ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15cf670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInvitationFromNonChannelMember _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1585ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testChannelIdInvalid ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd15855e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testUIdInvalid _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1585d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd156ab80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testGlobalOwnerJoinChannelPublic ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd156ac10>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testGlobalOwnerJoinChannelPrivate ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd155da60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testGlobalMemberJoinPublic _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd155daf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testGlobalMemberCantJoinPrivate _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1540940>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testAlreadyJoinedChannel __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1540ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testJoinInvalidChannelId __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd154d820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd154dee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testMemberLeaveChannelSuccessfully _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd150eee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testLeaveChannelWhenNotMember ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd150eca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd150edc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14e2b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testMessageTimestamp ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14abc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14ab430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14abb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testRemovalByEditReflected _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14bc940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14bcaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1488160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14ac9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInputErrorWhenChannelIdInvalid _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1488ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1488e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testOwnerCanRemoveOwner ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd14889d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testGlobalOwnerMmberCanRemoveOwner _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1466820>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testGlobalOwnerNonmemberCannotRemoveOwner __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1440e50>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testNonmemberCannotRemoveOwner _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1440670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testMmberCannotRemoveOwner _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1440700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testCannotRemoveLastOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd142dd30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testGlobalOwnerCannotRemoveOnlyOwner ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1414ca0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testCannotRemoveNonOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1414430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testInvalidUId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1414b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testWithInvalidChannelId __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13e0940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13e09d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testCreateChannel[True-andys room] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13ed820>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testCreateChannel[False-andys room] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13ed8b0>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testInvalidChannelNameLength[True-] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13eddc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13bdf70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testInvalidChannelNameLength[False-] ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13bdee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13cec10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13ced30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testWhenInNoChannels ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13c05e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testWhenInOneChannel[True-andy] _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1391c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testWhenInOneChannel[False-andy] ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1391af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______ ERROR at setup of testWhenInMultipleChannels[False-True-ZERG-andy] ______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd135e940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____ ERROR at setup of testWhenInMultipleChannels[False-False-ZERG-andy] ______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13460d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______ ERROR at setup of testWhenInMultipleChannels[True-True-ZERG-andy] _______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd13469d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______ ERROR at setup of testWhenInMultipleChannels[True-False-ZERG-andy] ______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd135ea60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testListAfterLeaveChannel __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1346940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1391b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testWhenNoChannels _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd131cee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testWhenOneChannelExistsPrivate _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1351dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testWhenOneChannelExistsPublic _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1351700>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testWhenMultipleChannelsExist ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1351e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12e05e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testSuccessfulDmCreation __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12e0d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testDmNameCreationMultiple _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12dd4c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testDmToInvalidUsers ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12f49d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testDmToUsersButOneInvalid _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12f4b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testDmToUsersButDuplicate __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1440ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12c78b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testMemberSuccessful ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12c7dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1267040>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidDmId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12beee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd12be940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testMemberLeaveDmSuccessfully ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1267dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testLeaveDmWhenNotMember __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1283dc0>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidDmId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1283f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1258ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testWhenInNoDms _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1258e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testWhenInOneDm _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1251c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testWhenInMultipleDms ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1251dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testListAfterLeaveDm ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1212af0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1212ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1204b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1204af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testRemovalByEditReflected _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1204ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11dea60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11dedc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd119fd30>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testInputErrorWhenDmIdInvalid ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd119fee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11bcb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testSuccessfulDmRemoval ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11bcd30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testRemovalRemovesMessages _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11a4dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testNonownerCannotRemoveDm _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11a4f70>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testOwnerNonmemberCannotRemoveDm ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd115cc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidDmId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd115cdc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1183af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testOriginalPosterCanEditMessageChannel ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1183ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testOriginalPosterCanEditMessageDm _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1175a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testGlobalOwnerCantEditMembersMessageDm ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1175430>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testEmptyEditDeletesMessage _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1175b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testInvalidMessageLength __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1175f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testCannotEditDeletedMessage ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1145ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testNonownerNonposterCantEdit ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd11328b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1132f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testMessageIdsUnique ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd10e3ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testMessageIdsUniqueIter3 __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd10e3790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testSuccessfulPinChannelOwnerInChannel ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd110c5e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testSuccessfulPinDmOwnerInDm ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd110ce50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testSuccessfulPinGlobalOwnerInChannel ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd110cdc0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessageId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd10cedc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testCannotPinTwice _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd10ced30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testChannelMemberCantPin __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd109ab80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testDmMemberCantPin _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd109aee0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testGlobalOwnerCantPinInDm _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd10a70d0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testNonmemberCantPin ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd10a7ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1088dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testSuccessfulReactInChannel ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1088f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testSuccessfulReactToDmMessage _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1074670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessageId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1074ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidReactId _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd108ad30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testCantReactTwice _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd108a5e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testNonmemberCannotReact __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1014c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1014430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testOriginalPosterCanRemoveMessage _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd1014b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testGlobalOwnerCantRemoveMembersMessageDm __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd100f280>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testCannotRemoveDeletedMessage _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd104aa60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testNonownerNonposterCantRemoveMessage ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd100fee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd100f940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testValidMessage ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fdcf70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testNonmemberPost ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fdc820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidChannel _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fbae50>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fba670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fccca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fcc430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testValidMessage ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fccc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testNonmemberPost ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0fae1f0>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testInvalidDm ________________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0faeaf0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f580d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f589d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f56c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testValidFutureMessage ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f568b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testReturnsImmediately ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f2b700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testInvalidReturnedIdUntilSent _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f2be50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testNonmemberCannotSendlater ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f21670>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testCannotTimeTravelAkaSendMessageInPast __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f485e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f484c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f48d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidChannel _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0f48550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0edf1f0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testValidFutureMessage ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0edfa60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testReturnsImmediately ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0eda0d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testInvalidReturnedIdUntilSent _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0edad30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testNonmemberCannotSendlater ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0eb2e50>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testCannotTimeTravelAkaSendMessageInPast __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ebc8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0eb2ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ebcc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testInvalidDm ________________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ecddc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ecd670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testSuccessfulShareToChannel ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e8f4c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testSuccessfulShareToDm ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e8fc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testSuccessfulCrossShare[True] _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e83430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testSuccessfulCrossShare[False] _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e83af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testCannotShareToUnjoinedDm _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e83b80>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testCannotShareToUnjoinedChannel ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e358b0>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testCannotShareFromUnjoinedChannel _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e35a60>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testCannotShareFromUnjoinedDm ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e4c940>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInvalidOgMessageId ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e4cee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testInvalidMessageLength __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e13820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testShareToInvalidChannelId _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0e13ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testShareToInvalidDmId ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0dd6700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0dd6dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testSuccessfulUnpinChannelOwnerInChannel __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0dfcdc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testSuccessfulUnpinDmOwnerInDm _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0dfcb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testSuccessfulUnpinGlobalOwnerInChannel ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0dfcca0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessageId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0dae550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testCannotUnpinTwice ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0daec10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testChannelMemberCantUnpin _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0db03a0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testDmMemberCantUnpin ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0db09d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testGlobalOwnerCantUnpinInDm ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0db7940>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testNonmemberCantUnpin ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0db7ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d55790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testSuccessfulUnreactInChannel _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d55e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testSuccessfulUnreactToDmMessage ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d75c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessageId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d755e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidReactId _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d75dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testCantUnreactTwice ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d31c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testNonmemberCannotUnreact _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d1e3a0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d1eaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testClearWorks _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d1eb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testTagThruMessageSendTriggersNotification _________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0cfd280>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testTagNotInChannel _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0d47e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testMultipleSameTagsOnlyOneNotification ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0cfdaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________________ ERROR at setup of testTagSelf _________________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0cfd0d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testMultipleTags ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0cecc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testTagThruMessageSenddmTriggersNotification ________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c968b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testTagThruMessageEditTriggersNotification _________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c96e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testTagThruMessageShareTriggersNotification _________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ccc550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______ ERROR at setup of testTagThruMessageSendlaterTriggersNotification _______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ccce50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testMessageSendlaterTagNotifiesWhenSent ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c965e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____ ERROR at setup of testTagThruMessageSendlaterdmTriggersNotification ______

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0cbbb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__ ERROR at setup of testTagNotificationMessagePreviewLength[a small message] __

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0cbb430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c96c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testReactTriggersNotification[ch] ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c58430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testReactTriggersNotification[dm] ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c58f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testAddThruChInviteTriggersNotification ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c81160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testAddThruDmCreateTriggersNotification ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c81af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testMostRecent_20NotificationsFetched ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c6ca60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c6cf70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testNoMatches ________________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c1adc0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testSingleMatch _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c1ac10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testCaseInsensitiveMatch __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c27d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testMultipleMatches _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0c27ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testMultipleChannelsJoined _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0bdcc10>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testSearchIncludesOnlyJoinedChannels ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0bdcdc0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testSearchMatchesMoreThanJustAuthorisedUser _________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0be74c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidSearch[] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0be7ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0be7c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b9aaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testSuccessfulUsersAll ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b9ae50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0bc99d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testCorrectReturnFormat[True] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0bc9dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testCorrectReturnFormat[False] _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b928b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testActiveStandup ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b92ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInactiveStandup _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b8df70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b8d820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b66670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testMessagesBufferedAndDisplayedCorrectly __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b66dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testStandupSendsAfterLoggedOut _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b355e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testReturnFormat ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b35550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testNonMemberCannotStandupSend _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b38c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testSendWhenStandupInactive _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b384c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testInvalidMessageLength __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b38b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b3ca60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0b3caf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testStandupStartReturnFormat ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ad5160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testStandupNoMessages ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ad5940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testReturnsImmediately ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0aec8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testStandupRestartableAfterLapse ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0aecf70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testStandupAffectsOnlyOneChannel ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ab6790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testNonmemberCannotStartStandup _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ab6d30>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testCannotStartStandupWhenAlreadyActive ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ac4b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testInvalidStandupLength __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ac4670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ac4d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ab0b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testReturnTypeCorrect ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0ab0c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testChannelsTrackedChannelsCreate ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a85160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testChannelsTrackedChannelJoin _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a85ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testChannelsTrackedChannelInvite ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a690d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testChannelsTrackedChannelLeave _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a69a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testSmsTrackedSmCreate ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a28e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testSmsTrackedSmLeave ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a28940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testSmsTrackedSmRemove ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a3fdc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testMessagesTrackedMessageSend _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a3ff70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testMessagesTrackedMessageSendlater _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a4aee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a4a670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09d5dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedMessageShare _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09d55e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedStandupFinish ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a08ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInvolvementTracked ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a084c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0a08c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testReturnTypeCorrect ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09a3af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testChannelsTrackedChannelsCreate ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09a3e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testDmsTrackedDmCreate ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09c5a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testDmsTrackedDmRemove ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09c5dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testMessagesTrackedMessageSend _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09abee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testMessagesTrackedMessageSendlater _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09abca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0984d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0984820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedMessageShare _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd095bee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedStandupFinish ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd095b700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testMessagesTrackedEditedToRemoval _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd093bdc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testMessagesTrackedDeleted _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd093b5e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testMessagesTrackedDmRemoved ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0947ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testUtilizationTracked ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd09474c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0947c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testUserProfileValid ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd094eaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidUser _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd094ee50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08d9a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testSuccessfulEmailChange __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08d9dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testCannotChangeToTakenEmail ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08fb040>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidEmail[] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08fbee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInvalidEmail[bob] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08fbe50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testInvalidEmail[ab.com] __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08c0ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testInvalidEmail[@gmail.com] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08d0ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInvalidEmail[ab@ab@gmail.com] ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08d0ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08d0e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testSuccessfulHandleChange _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08c54c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testCannotChangeToTakenHandle ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd08c5d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidHandle[] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0858430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidHandle[a] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0858ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInvalidHandle[aa] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd088baf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] __________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0872b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testInvalidHandle[new handle] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0872160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testInvalidHandle[newh@ndle] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0872af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd081f940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testUserProfileSetnameValidName _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd081fee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidName[-] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0849820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0849c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd080ee50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

userFactory = <function userFactory.<locals>.makeUser at 0x7effd080e700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07d4d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testReturnFormatCorrect ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07d4550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testCannotUploadNonJpeg ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07b6430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInvalidDimensions[-1000-0-0-0] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07a53a0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInvalidDimensions[0--1000-0-0] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07a5a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInvalidDimensions[0-0--1000-0] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07b5160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testInvalidDimensions[0-0-0--1000] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07b5940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testXEndLessThanStartValue _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07b6f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testYEndLessThanStartValue _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07b5e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testInvalidUrl _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd07a5c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7effd0784e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
=================================== FAILURES ===================================
_____________________________ testUnregisteredUser _____________________________

ctx = None

    def testUnregisteredUser(ctx):
        #  this test also covers 'invalid' emails, as an invalid email belongs to no user
        with pytest.raises(InputError):
>           authLogin('bob.jane@example.com', 'qazwsx!!', ctx)

httpTests/authTests/test_auth_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:12: in authLogin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________________ testInvalidEmail[@gmail.com] _________________________

email = '@gmail.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testInvalidEmail[bob@bob@bob.com] _______________________

email = 'bob@bob@bob.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________________ testInvalidPassword[12345] __________________________

password = '12345', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, password, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________________ testInvalidPassword[] _____________________________

password = '', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, password, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________________ testInvalidNameFirst[] ____________________________

nameFirst = '', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)

httpTests/authTests/test_auth_register.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__ testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] ___

nameFirst = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)

httpTests/authTests/test_auth_register.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________________ testInvalidNameLast[] _____________________________

nameLast = '', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)

httpTests/authTests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___ testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] ___

nameLast = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)

httpTests/authTests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________________ testDuplicateEmail ______________________________

ctx = None

    def testDuplicateEmail(ctx):
>       authRegister('ab@gmail.com', 'password1', 'name-first-a', 'name-last-a', ctx)

httpTests/authTests/test_auth_register.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testRemovedUserName ______________________________

ctx = None

    def testRemovedUserName(ctx):
>       session = authRegister('abc@gmail.com', 'password1', 'Removed', 'user', ctx)

httpTests/authTests/test_auth_register.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________ testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] _____________

nameFirst = 'Bob', nameLast = 'Smith', expectedHandle = 'bobsmith', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
>       session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)

httpTests/authTests/test_auth_register.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
>       session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)

httpTests/authTests/test_auth_register.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidPassword ______________________________

ctx = None

    @iteration3
    def testInvalidPassword(ctx):
        with pytest.raises(InputError):
>           authPasswordresetReset('ur a wizard herry', 'ord', ctx)

httpTests/authTests/test_passwordreset_reset.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:56: in authPasswordresetReset
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
=============================== warnings summary ===============================
../../../../../../usr/lib/python3/dist-packages/blinker/base.py:93
  /usr/lib/python3/dist-packages/blinker/base.py:93: DeprecationWarning: invalid escape sequence \*
    """Connect *receiver* to signal events sent by *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:161
  /usr/lib/python3/dist-packages/blinker/base.py:161: DeprecationWarning: invalid escape sequence \*
    """Connect the decorated function as a receiver for *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:242
  /usr/lib/python3/dist-packages/blinker/base.py:242: DeprecationWarning: invalid escape sequence \*
    """Emit this signal on behalf of *sender*, passing on \*\*kwargs.

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED httpTests/authTests/test_auth_login.py::testUnregisteredUser - Excepti...
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] - Exc...
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[12345]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[] - Exc...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] - Ex...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[] - Exc...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateEmail - Except...
FAILED httpTests/authTests/test_auth_register.py::testRemovedUserName - Excep...
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword
ERROR httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything
ERROR httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll
ERROR httpTests/adminTests/test_admin_user_remove.py::testEmailReusable - Exc...
ERROR httpTests/adminTests/test_admin_user_remove.py::testHandleReusable - Ex...
ERROR httpTests/adminTests/test_admin_user_remove.py::testInvalidUser - Excep...
ERROR httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner
ERROR httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner
ERROR httpTests/adminTests/test_admin_user_remove.py::testInvalidToken - Exce...
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission
ERROR httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken
ERROR httpTests/authTests/test_auth_login.py::testSuccessfulLogin - Exception...
ERROR httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - Except...
ERROR httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword
ERROR httpTests/authTests/test_auth_logout.py::testSuccessfulLogout - Excepti...
ERROR httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
ERROR httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect
ERROR httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember
ERROR httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
ERROR httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId - E...
ERROR httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId
ERROR httpTests/channelTests/test_channel_addowner.py::testInvalidToken - Exc...
ERROR httpTests/channelTests/test_channel_details.py::testMemberSuccessful - ...
ERROR httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful
ERROR httpTests/channelTests/test_channel_details.py::testInvalidChannelId - ...
ERROR httpTests/channelTests/test_channel_details.py::testInvalidToken - Exce...
ERROR httpTests/channelTests/test_channel_invite.py::testDuplicateInvite - Ex...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner - ...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember
ERROR httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember
ERROR httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid - E...
ERROR httpTests/channelTests/test_channel_invite.py::testUIdInvalid - Excepti...
ERROR httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - E...
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate
ERROR httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel
ERROR httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId
ERROR httpTests/channelTests/test_channel_join.py::testInvalidatedToken - Exc...
ERROR httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully
ERROR httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember
ERROR httpTests/channelTests/test_channel_leave.py::testInvalidChannelId - Ex...
ERROR httpTests/channelTests/test_channel_leave.py::testInvalidToken - Except...
ERROR httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
ERROR httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected
ERROR httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid
ERROR httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidUId - Ex...
ERROR httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken
ERROR httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room]
ERROR httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels - ...
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel
ERROR httpTests/channels_tests/test_channels_list.py::testInvalidatedToken - ...
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist
ERROR httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
ERROR httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - Excepti...
ERROR httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - Excep...
ERROR httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers - Exception: ...
ERROR httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid - Excep...
ERROR httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate - Except...
ERROR httpTests/dmTests/test_dm_create.py::testInvalidToken - Exception: <Res...
ERROR httpTests/dmTests/test_dm_details.py::testMemberSuccessful - Exception:...
ERROR httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful - Exce...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidDmId - Exception: <Res...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidToken - Exception: <Re...
ERROR httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - Exc...
ERROR httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember - Exceptio...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidDmId - Exception: <Respo...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidToken - Exception: <Resp...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInNoDms - Exception: <Respon...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInOneDm - Exception: <Respon...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - Exception: <...
ERROR httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm - Exception: <R...
ERROR httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Exception: <R...
ERROR httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - Exc...
ERROR httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - Exce...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - Exc...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
ERROR httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid - ...
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval - Exceptio...
ERROR httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages - Excep...
ERROR httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm - Excep...
ERROR httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidDmId - Exception: <Resp...
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidToken - Exception: <Res...
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage
ERROR httpTests/messageTests/test_message_edit.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage
ERROR httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit
ERROR httpTests/messageTests/test_message_edit.py::testInvalidToken - Excepti...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUnique - Exc...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel
ERROR httpTests/messageTests/test_message_pin.py::testInvalidMessageId - Exce...
ERROR httpTests/messageTests/test_message_pin.py::testCannotPinTwice - Except...
ERROR httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin - ...
ERROR httpTests/messageTests/test_message_pin.py::testDmMemberCantPin - Excep...
ERROR httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm
ERROR httpTests/messageTests/test_message_pin.py::testNonmemberCantPin - Exce...
ERROR httpTests/messageTests/test_message_pin.py::testInvalidToken - Exceptio...
ERROR httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel
ERROR httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage
ERROR httpTests/messageTests/test_message_react.py::testInvalidMessageId - Ex...
ERROR httpTests/messageTests/test_message_react.py::testInvalidReactId - Exce...
ERROR httpTests/messageTests/test_message_react.py::testCantReactTwice - Exce...
ERROR httpTests/messageTests/test_message_react.py::testNonmemberCannotReact
ERROR httpTests/messageTests/test_message_react.py::testInvalidToken - Except...
ERROR httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
ERROR httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage
ERROR httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testInvalidToken - Excep...
ERROR httpTests/messageTests/test_message_send.py::testValidMessage - Excepti...
ERROR httpTests/messageTests/test_message_send.py::testNonmemberPost - Except...
ERROR httpTests/messageTests/test_message_send.py::testInvalidChannel - Excep...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[] - Exc...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_send.py::testInvalidToken - Excepti...
ERROR httpTests/messageTests/test_message_senddm.py::testValidMessage - Excep...
ERROR httpTests/messageTests/test_message_senddm.py::testNonmemberPost - Exce...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidDm - Exceptio...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] - E...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidToken - Excep...
ERROR httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage
ERROR httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent
ERROR httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater
ERROR httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[]
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidChannel - ...
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidToken - Ex...
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[]
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm - Exc...
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken - ...
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True]
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False]
ERROR httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm
ERROR httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel
ERROR httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel
ERROR httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm
ERROR httpTests/messageTests/test_message_share.py::testInvalidOgMessageId - ...
ERROR httpTests/messageTests/test_message_share.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId
ERROR httpTests/messageTests/test_message_share.py::testShareToInvalidDmId - ...
ERROR httpTests/messageTests/test_message_share.py::testInvalidToken - Except...
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel
ERROR httpTests/messageTests/test_message_unpin.py::testInvalidMessageId - Ex...
ERROR httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice - Ex...
ERROR httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin
ERROR httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin - E...
ERROR httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm
ERROR httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin - ...
ERROR httpTests/messageTests/test_message_unpin.py::testInvalidToken - Except...
ERROR httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel
ERROR httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidMessageId - ...
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidReactId - Ex...
ERROR httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice - ...
ERROR httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidToken - Exce...
ERROR httpTests/otherTests/test_clear.py::testClearWorks - Exception: <Respon...
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotInChannel - E...
ERROR httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagSelf - Exception...
ERROR httpTests/otherTests/test_notifications_get.py::testMultipleTags - Exce...
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message]
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch]
ERROR httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm]
ERROR httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched
ERROR httpTests/otherTests/test_notifications_get.py::testInvalidToken - Exce...
ERROR httpTests/otherTests/test_search.py::testNoMatches - Exception: <Respon...
ERROR httpTests/otherTests/test_search.py::testSingleMatch - Exception: <Resp...
ERROR httpTests/otherTests/test_search.py::testCaseInsensitiveMatch - Excepti...
ERROR httpTests/otherTests/test_search.py::testMultipleMatches - Exception: <...
ERROR httpTests/otherTests/test_search.py::testMultipleChannelsJoined - Excep...
ERROR httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels
ERROR httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser
ERROR httpTests/otherTests/test_search.py::testInvalidSearch[] - Exception: <...
ERROR httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
ERROR httpTests/otherTests/test_search.py::testInvalidToken - Exception: <Res...
ERROR httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - Except...
ERROR httpTests/otherTests/test_users_all.py::testInvalidToken - Exception: <...
ERROR httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True]
ERROR httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False]
ERROR httpTests/standupTests/test_standup_active.py::testActiveStandup - Exce...
ERROR httpTests/standupTests/test_standup_active.py::testInactiveStandup - Ex...
ERROR httpTests/standupTests/test_standup_active.py::testInvalidChannelId - E...
ERROR httpTests/standupTests/test_standup_active.py::testInvalidToken - Excep...
ERROR httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly
ERROR httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut
ERROR httpTests/standupTests/test_standup_send.py::testReturnFormat - Excepti...
ERROR httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend
ERROR httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive
ERROR httpTests/standupTests/test_standup_send.py::testInvalidMessageLength
ERROR httpTests/standupTests/test_standup_send.py::testInvalidChannelId - Exc...
ERROR httpTests/standupTests/test_standup_send.py::testInvalidToken - Excepti...
ERROR httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat
ERROR httpTests/standupTests/test_standup_start.py::testStandupNoMessages - E...
ERROR httpTests/standupTests/test_standup_start.py::testReturnsImmediately - ...
ERROR httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse
ERROR httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel
ERROR httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup
ERROR httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive
ERROR httpTests/standupTests/test_standup_start.py::testInvalidStandupLength
ERROR httpTests/standupTests/test_standup_start.py::testInvalidChannelId - Ex...
ERROR httpTests/standupTests/test_standup_start.py::testInvalidToken - Except...
ERROR httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect - Except...
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmCreate - Excep...
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmLeave - Except...
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmRemove - Excep...
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish
ERROR httpTests/statsTests/test_user_stats.py::testInvolvementTracked - Excep...
ERROR httpTests/statsTests/test_user_stats.py::testInvalidToken - Exception: ...
ERROR httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect - Excep...
ERROR httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate
ERROR httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate - Exce...
ERROR httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove - Exce...
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted - ...
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved
ERROR httpTests/statsTests/test_users_stats.py::testUtilizationTracked - Exce...
ERROR httpTests/statsTests/test_users_stats.py::testInvalidToken - Exception:...
ERROR httpTests/userTests/test_user_profile.py::testUserProfileValid - Except...
ERROR httpTests/userTests/test_user_profile.py::testInvalidUser - Exception: ...
ERROR httpTests/userTests/test_user_profile.py::testInvalidToken - Exception:...
ERROR httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
ERROR httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - E...
ERROR httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
ERROR httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken - ...
ERROR httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] - ...
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-]
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidToken - Ex...
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0]
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0]
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0]
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000]
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl - ...
ERROR httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken
================= 15 failed, 3 warnings, 351 errors in 13.50s ==================
