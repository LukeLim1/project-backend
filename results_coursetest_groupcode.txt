npm verb cli [
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/node',
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/npm',
npm verb cli   'run',
npm verb cli   'test',
npm verb cli   '--verbose',
npm verb cli   'tests/'
npm verb cli ]
npm info using npm@8.5.0
npm info using node@v16.14.2
npm timing npm:load:whichnode Completed in 0ms
npm timing config:load:defaults Completed in 2ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/lib/node_modules/npm/npmrc Completed in 1ms
npm timing config:load:builtin Completed in 1ms
npm timing config:load:cli Completed in 3ms
npm timing config:load:env Completed in 0ms
npm timing config:load:file:/import/kamen/3/cs1531/project-automarking/tempstore/.npmrc Completed in 0ms
npm timing config:load:project Completed in 11ms
npm timing config:load:file:/import/kamen/3/cs1531/.npmrc Completed in 0ms
npm timing config:load:user Completed in 0ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/etc/npmrc Completed in 0ms
npm timing config:load:global Completed in 0ms
npm timing config:load:validate Completed in 1ms
npm timing config:load:credentials Completed in 1ms
npm timing config:load:setEnvs Completed in 1ms
npm timing config:load Completed in 20ms
npm timing npm:load:configload Completed in 20ms
npm timing npm:load:setTitle Completed in 1ms
npm timing config:load:flatten Completed in 3ms
npm timing npm:load:display Completed in 6ms
npm verb logfile /import/kamen/3/cs1531/.npm/_logs/2022-06-25T00_47_40_440Z-debug-0.log
npm timing npm:load:logFile Completed in 7ms
npm timing npm:load:timers Completed in 0ms
npm timing npm:load:configScope Completed in 0ms
npm timing npm:load Completed in 35ms

> test
> jest "tests/"

PASS tests/tests/channels_tests/channelsCreate.test.js
FAIL tests/tests/user_tests/userProfile.test.js
  ● Test valid user profile

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 0

      Object {
    -   "user": Object {
        "email": "blah@email.com",
        "handleStr": "johnsmith",
        "nameFirst": "john",
        "nameLast": "smith",
        "uId": 2,
    -   },
      }

      16 |     let uID = authRegisterV1('blah@email.com', 'password1', 'john', 'smith');
      17 |     let res = userProfileV1(authID.authUserId, uID.authUserId);
    > 18 |     expect(res).toStrictEqual({user: {uId: uID.authUserId, email: 'blah@email.com', nameFirst: 'john', nameLast: 'smith', handleStr: 'johnsmith'}});
         |                 ^
      19 | });
      20 |
      21 | /*

      at Object.<anonymous> (tests/tests/user_tests/userProfile.test.js:18:17)

FAIL tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "@bcdefgh!j", "nameLast": "klmn opqrst", "uId": 3180}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 2636}, {"email": "blah1@email.com", "handleStr": "@bcdefgh!jklmn opqrs", "nameFirst": "@bcdefgh!j", "nameLast": "klmn", "uId": 3180}, {"email": "blah2@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "bcdefghj", "nameLast": "klmnopqrst", "uId": 3181}]

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

FAIL tests/tests/channels_tests/channelsListall.test.js
  ● Test when no channels

    expect(received).toStrictEqual(expected) // deep equality

    Expected: []
    Received: undefined

      22 |     clearV1();
      23 |     let res = channelsListallV1(uIdZerg)['channels']
    > 24 |     expect(res).toStrictEqual([]);
         |                 ^
      25 | });
      26 |
      27 | test('Test when one channel exists private', () => {

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:24:17)

  ● Test when one channel exists private

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": 3358, "name": "zergs lair"}]
    Received: undefined

      28 |     let res = channelsListallV1(uIdWoody)['channels'];
      29 |     let channelDetail = {'channelId': chIdZerg, 'name': 'zergs lair'}
    > 30 |     expect(res).toEqual(
         |                 ^
      31 |         expect.arrayContaining([
      32 |             expect.objectContaining(channelDetail)
      33 |         ])

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:30:17)

  ● Test when one channel exists public

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": 3941, "name": "woodys toybox"}]
    Received: undefined

      38 |     let res = channelsListallV1(uIdZerg)['channels'];
      39 |     let channelDetail = {'channelId': chIdWoody, 'name': 'woodys toybox'}
    > 40 |     expect(res).toEqual(
         |                 ^
      41 |         expect.arrayContaining([
      42 |             expect.objectContaining(channelDetail)
      43 |         ])

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:40:17)

  ● Test when multiple channels exist

    TypeError: Cannot read properties of undefined (reading 'sort')

      52 |     let res = channelsListallV1(uIdBuzz)['channels'];
      53 |     // sort according to channelId values
    > 54 |     res.sort((a, b) => (a['channelId']- b['channelId']));
         |         ^
      55 |     expectedChannels.sort((a, b) => (a['channelId']- b['channelId']));
      56 |     expect(res).toStrictEqual(expectedChannels);
      57 | });

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:54:9)

PASS tests/tests/channel_tests/channelInvite.test.js
FAIL tests/tests/channels_tests/channelsList.test.js
  ● Test member in no channels

    expect(received).toStrictEqual(expected) // deep equality

    Expected: []
    Received: undefined

      16 | test('Test member in no channels', () => {
      17 |     let res = channelsListV1(uId)['channels']
    > 18 |     expect(res).toStrictEqual([]);
         |                 ^
      19 | });
      20 |
      21 | describe("Test channel owner in channel", () => {

      at Object.<anonymous> (tests/tests/channels_tests/channelsList.test.js:18:17)

  ● Test channel owner in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      25 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
      26 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 27 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      28 |         }
      29 |     );
      30 | });

      at tests/tests/channels_tests/channelsList.test.js:27:53

  ● Test channel owner in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      25 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
      26 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 27 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      28 |         }
      29 |     );
      30 | });

      at tests/tests/channels_tests/channelsList.test.js:27:53

  ● Test channel member in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      37 |             channelInviteV1(uId, chId, uIdWoody);
      38 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 39 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      40 |         }
      41 |     );
      42 | });

      at tests/tests/channels_tests/channelsList.test.js:39:53

  ● Test channel member in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      37 |             channelInviteV1(uId, chId, uIdWoody);
      38 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 39 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      40 |         }
      41 |     );
      42 | });

      at tests/tests/channels_tests/channelsList.test.js:39:53

  ● Test user in multiple channels › Create channel then list details

    TypeError: Cannot read properties of undefined (reading 'sort')

      51 |             let expectedDeets = [{'channelId': chId, 'name': 'andy'}, {'channelId': chId2, 'name': 'ZERG'}];
      52 |             let deets = channelsListV1(uId)['channels'];
    > 53 |             deets.sort((a, b) => (a['channelId']- b['channelId']));
         |                   ^
      54 |             expectedDeets.sort((a, b) => (a['channelId']- b['channelId']));
      55 |             expect(expectedDeets).toStrictEqual(deets);
      56 |         }

      at tests/tests/channels_tests/channelsList.test.js:53:19

  ● Test user in multiple channels › Create channel then list details

    TypeError: Cannot read properties of undefined (reading 'sort')

      51 |             let expectedDeets = [{'channelId': chId, 'name': 'andy'}, {'channelId': chId2, 'name': 'ZERG'}];
      52 |             let deets = channelsListV1(uId)['channels'];
    > 53 |             deets.sort((a, b) => (a['channelId']- b['channelId']));
         |                   ^
      54 |             expectedDeets.sort((a, b) => (a['channelId']- b['channelId']));
      55 |             expect(expectedDeets).toStrictEqual(deets);
      56 |         }

      at tests/tests/channels_tests/channelsList.test.js:53:19

FAIL tests/tests/channel_tests/channelJoin.test.js
  ● Test global owner can join private channel

    TypeError: Cannot read properties of undefined (reading 'map')

      22 |     channelJoinV1(uIdWoody, chIdZerg);
      23 |     let chDeets = channelDetailsV1(uIdWoody, chIdZerg);
    > 24 |     let owners = chDeets['ownerMembers'].map(mem => mem['uId']);
         |                                          ^
      25 |     let allmems = chDeets['allMembers'].map(mem => mem['uId']);
      26 |     expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      27 |     expect(allmems).toContain(uIdWoody);

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:24:42)

PASS tests/tests/channel_tests/channelMessages.test.js
PASS tests/tests/other_tests/clear.test.js
PASS tests/tests/auth_tests/authLogin.test.js
FAIL tests/tests/auth_tests/authRegister.test.js
  ● Test register with invalid first name

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "error": "error",
    +   "authUserId": 1,
      }

      50 |     clearV1();
      51 |     result = authRegisterV1(EMAIL, PASSWORD, 'a'.repeat(51), LAST);
    > 52 |     expect(result).toStrictEqual({error: 'error'});
         |                    ^
      53 |     clearV1();
      54 | });
      55 |

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:52:20)

  ● Test register with invalid last name

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "error": "error",
    +   "authUserId": 2,
      }

      59 |     clearV1();
      60 |     result = authRegisterV1(EMAIL, PASSWORD, FIRST, 'b'.repeat(51));
    > 61 |     expect(result).toStrictEqual({error: 'error'});
         |                    ^
      62 |     clearV1();
      63 | });
      64 |

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:61:20)

Test Suites: 6 failed, 5 passed, 11 total
Tests:       16 failed, 36 passed, 52 total
Snapshots:   0 total
Time:        2.285 s
Ran all test suites matching /tests\//i.
npm timing command:run Completed in 3408ms
npm verb exit 1
npm timing npm Completed in 3671ms
npm verb code 1
